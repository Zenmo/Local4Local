<?xml version="1.0" encoding="UTF-8"?>
<!--
*************************************************
	         AnyLogic Project File 
*************************************************	         
-->
<AnyLogicWorkspace WorkspaceVersion="1.9" AnyLogicVersion="8.9.0.202404161156" AlpVersion="8.9.0">
<Model>
	<Id>1658477103134</Id>
	<Name><![CDATA[Zero_Loader]]></Name>
	<EngineVersion>6</EngineVersion>
	<JavaPackageName><![CDATA[zero_loader]]></JavaPackageName>
	<ModelTimeUnit><![CDATA[Hour]]></ModelTimeUnit>
	<OptionLists>
		<OptionList>
			<Id>1709718356700</Id>
			<Name><![CDATA[EnergyDemandTab]]></Name>
			<Option>
				<Id>1709718356702</Id>
				<Name><![CDATA[MOBILITY]]></Name>
			</Option>
			<Option>
				<Id>1709718356704</Id>
				<Name><![CDATA[ELECTRICITY]]></Name>
			</Option>
			<Option>
				<Id>1709718356706</Id>
				<Name><![CDATA[HEAT]]></Name>
			</Option>
			<Option>
				<Id>1714324700437</Id>
				<Name><![CDATA[HUB]]></Name>
			</Option>
		</OptionList>
		<OptionList>
			<Id>1717319116963</Id>
			<Name><![CDATA[OL_IsolationLevelHouse]]></Name>
			<Option>
				<Id>1717319116964</Id>
				<Name><![CDATA[A]]></Name>
			</Option>
			<Option>
				<Id>1717319116965</Id>
				<Name><![CDATA[B]]></Name>
			</Option>
			<Option>
				<Id>1717319116966</Id>
				<Name><![CDATA[C]]></Name>
			</Option>
			<Option>
				<Id>1717319116967</Id>
				<Name><![CDATA[D]]></Name>
			</Option>
		</OptionList>
	</OptionLists>
	<ActiveObjectClasses>
		<!--   =========   Active Object Class   ========  -->
		<ActiveObjectClass>
			<Id>1658477103140</Id>
			<Name><![CDATA[Loader]]></Name>
			<Import><![CDATA[import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.node.NumericNode;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.FileOutputStream;
import java.util.stream.Stream;
import java.util.Dictionary.*;
import java.util.Hashtable.*;
import java.util.*;
import java.util.stream.Collectors;

import java.io.*;
import java.io.File;
import java.io.IOException;
//import java.util.Date;  
import java.text.SimpleDateFormat;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import org.bouncycastle.crypto.StreamBlockCipher;


//Possibility to turn of traceln
import java.io.OutputStream;
import java.io.PrintStream;
import kotlin.reflect.jvm.internal.impl.types.RawType;
//import zero_engine.OL_GridConnectionHeatingType;]]></Import>
			<StartupCode><![CDATA[traceln("---------------------------");
traceln("======= STARTING UP =======");
traceln("---------------------------");
traceln("");

double startTime = System.currentTimeMillis();
v_timeOfModelStart_ms = startTime;
v_hourOfYearStart=hourOfYearPerMonth[getMonth()] + (getDayOfMonth()-1)*24;

//Weather market data
f_setWeatherMarketData();

// Populate the model
f_configureBackBoneZero();

//send the GIS map centre location to the interface 
zero_Interface.map_centre_latitude = project_data.map_centre_latitude;
zero_Interface.map_centre_longitude = project_data.map_centre_longitude;

//Start up of the User Interface
zero_Interface.f_UIStartup();

//Ending of the start up
double endTime = System.currentTimeMillis();
double duration = endTime - startTime;
v_modelStartUpDuration_s = roundToDecimal(duration / 1000, 3);

traceln(" ");
traceln("*** Start up finished *** ");
traceln("*** Start up duration: "+ v_modelStartUpDuration_s + " s ***");
traceln(" ");


//Simulate full year simulation for initial KPIs
if( p_runHeadlessAtStartup ){
	energyModel.f_runRapidSimulation(); // Do a full year run to have KPIs right away!
	zero_Interface.f_updateUIresultsMainArea();
	if (energyModel.UtilityConnections.size() > 0) {
		zero_Interface.f_updateUIresultsGridConnection( zero_Interface.uI_Results.v_gridConnection, energyModel.UtilityConnections.get(0));
	}
	zero_Interface.f_updateUIresultsGridNode( zero_Interface.uI_Results.v_trafo, energyModel.pop_gridNodes.get(0));
	if (energyModel.pop_energyCoops.size()>0) {
		zero_Interface.f_updateUIresultsEnergyCoop( zero_Interface.uI_Results.v_collective, energyModel.pop_energyCoops.get(0));
	}
	zero_Interface.b_resultsUpToDate = true;
}
else{
	zero_Interface.f_resetSettings();
}

//Voor scriptie Ate
if ( p_selectedProject == OL_Project.HESSENPOORT && System.getenv("HESSENPOORT_DB_USER").equals("ate")){
	Scriptie_Ate scriptieAte = zero_Interface.scriptie_Ate(0);
	scriptieAte.f_trafoBelastingKPIs();
	scriptieAte.f_hydrogenAvailability();
}]]></StartupCode>
			<Generic>false</Generic>
			<GenericParameter>
				<Id>1658477103138</Id>
				<Name><![CDATA[1658477103138]]></Name>
				<GenericParameterValue Class="CodeValue">
					<Code><![CDATA[T extends Agent]]></Code>
				</GenericParameterValue>
				<GenericParameterLabel><![CDATA[Generic parameter:]]></GenericParameterLabel>
			</GenericParameter>
			<FlowChartsUsage>ENTITY</FlowChartsUsage>
			<SamplesToKeep>100</SamplesToKeep>
			<LimitNumberOfArrayElements>false</LimitNumberOfArrayElements>
			<ElementsLimitValue>100</ElementsLimitValue>
			<MakeDefaultViewArea>true</MakeDefaultViewArea>
			<SceneGridColor/>
			<SceneBackgroundColor/>
			<SceneSkybox>null</SceneSkybox>
			<AgentProperties>
				<EnvironmentDefinesInitialLocation>true</EnvironmentDefinesInitialLocation>
				<RotateAnimationTowardsMovement>true</RotateAnimationTowardsMovement>
				<RotateAnimationVertically>false</RotateAnimationVertically>
				<VelocityCode Class="CodeUnitValue">
					<Code><![CDATA[10]]></Code>
					<Unit Class="SpeedUnits"><![CDATA[MPS]]></Unit>
				</VelocityCode>
				<PhysicalLength Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalLength>
				<PhysicalWidth Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalWidth>
				<PhysicalHeight Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalHeight>
			</AgentProperties>
			<EnvironmentProperties>
					<EnableSteps>false</EnableSteps>
					<StepDurationCode Class="CodeUnitValue">
						<Code><![CDATA[1.0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
					</StepDurationCode>
					<SpaceType>GIS</SpaceType>
					<WidthCode><![CDATA[500]]></WidthCode>
					<HeightCode><![CDATA[500]]></HeightCode>
					<ZHeightCode><![CDATA[0]]></ZHeightCode>
					<ColumnsCountCode><![CDATA[100]]></ColumnsCountCode>
					<RowsCountCode><![CDATA[100]]></RowsCountCode>
					<NeigborhoodType>MOORE</NeigborhoodType>
					<LayoutType>USER_DEF</LayoutType>
					<LayoutTypeApplyOnStartup>true</LayoutTypeApplyOnStartup>
					<NetworkType>USER_DEF</NetworkType>
					<NetworkTypeApplyOnStartup>true</NetworkTypeApplyOnStartup>
					<ConnectionsPerAgentCode><![CDATA[2]]></ConnectionsPerAgentCode>
					<ConnectionsRangeCode><![CDATA[50]]></ConnectionsRangeCode>
					<NeighborLinkFractionCode><![CDATA[0.95]]></NeighborLinkFractionCode>
					<MCode><![CDATA[10]]></MCode>
			</EnvironmentProperties>
			<DatasetsCreationProperties>
				<AutoCreate>false</AutoCreate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1658563200000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[HOUR]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[p_timeStep_h]]></Code>
						<Unit Class="TimeUnits"><![CDATA[HOUR]]></Unit>
					</RecurrenceCode>
			</DatasetsCreationProperties>
			<ScaleRuler>
				<Id>1658477103136</Id>
				<Name><![CDATA[scale]]></Name>
				<X>0</X><Y>-150</Y>
				<PublicFlag>false</PublicFlag>
				<PresentationFlag>false</PresentationFlag>
				<ShowLabel>false</ShowLabel>
				<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
				<Length>100</Length>
				<Rotation>0</Rotation>
				<ScaleType>BASED_ON_LENGTH</ScaleType>
				<ModelLength>10</ModelLength>
				<LengthUnits>METER</LengthUnits>
				<Scale>10</Scale>
				<InheritedFromParentAgentType>true</InheritedFromParentAgentType>
			</ScaleRuler>
			<CurrentLevel>1658477103139</CurrentLevel>
			<ConnectionsId>1658477103135</ConnectionsId>
			<Variables>
				<Variable Class="PlainVariable">
					<Id>1710256587035</Id>
					<Name><![CDATA[v_forceReloadProjectData]]></Name>
					<Description><![CDATA[-> Variable used to control if all excel tables have to be reloaded. (first time after switching from project for example, or after changes have been made in the excel files.)
It is suggested to set it at 'false', when it is not needed to reload, as this saves about 30 seconds of start up time.]]></Description>
					<X>869</X><Y>149</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[boolean]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[false]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1712068114653</Id>
					<Name><![CDATA[v_remainingAmountOfTrucks]]></Name>
					<X>110</X><Y>860</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1712224032859</Id>
					<Name><![CDATA[v_remainingFloorArea_m2]]></Name>
					<Description><![CDATA[variable that tracks how much floor area remains for the average companies. (this will be used to determine the average m3 and kwh per m2 floor area to be used by the unkown companies (that have not filled in the survey). 
Calculated by: initial value (total floor area of the area) - total floor area of the survey companies]]></Description>
					<X>110</X><Y>750</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1712226040521</Id>
					<Name><![CDATA[v_amountOfCompaniesNoSurvey]]></Name>
					<X>109</X><Y>719</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1712573610916</Id>
					<Name><![CDATA[v_remainingGasConsumption_m3]]></Name>
					<X>110</X><Y>790</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1712573620497</Id>
					<Name><![CDATA[v_remainingElectricityConsumption_kWh]]></Name>
					<X>110</X><Y>770</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1713968144104</Id>
					<Name><![CDATA[v_createCurrentElectricityEA]]></Name>
					<Description><![CDATA[-> Variable used to control if current electricity EA like EV and heat pumps are added on top of the existing consumption profile (which would make the EA consumption in reality count double). 
-> Decision right now: Dont create electric EA for current situation, to prevent double counting of assets.]]></Description>
					<X>870</X><Y>170</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[boolean]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[false]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1714140422273</Id>
					<Name><![CDATA[v_remainingAmountOfTrucks_per_genericCompany]]></Name>
					<X>110</X><Y>880</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1715632198072</Id>
					<Name><![CDATA[v_remainingAmountOfVans]]></Name>
					<X>110</X><Y>820</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1715632836400</Id>
					<Name><![CDATA[v_remainingAmountOfVans_per_genericCompany]]></Name>
					<X>110</X><Y>840</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1715858955021</Id>
					<Name><![CDATA[v_timeOfModelStart_ms]]></Name>
					<X>620</X><Y>290</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1715858955023</Id>
					<Name><![CDATA[v_modelStartUpDuration_s]]></Name>
					<X>620</X><Y>310</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1715858955025</Id>
					<Name><![CDATA[hourOfYearPerMonth]]></Name>
					<Description><![CDATA[Hour of year per month (not leap year) --> Houdt dit rekening met zomer/winter tijd?]]></Description>
					<X>620</X><Y>200</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int[]]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[new int[] {0, 744, 1392, 2136, 2856, 3600, 4320, 5064, 5808, 6528, 7272, 7992}]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1715858955027</Id>
					<Name><![CDATA[v_hourOfYearStart]]></Name>
					<X>620</X><Y>220</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="Parameter">
					<Id>1696926273936</Id>
					<Name><![CDATA[p_simulatedArea]]></Name>
					<X>619</X><Y>129</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[OL_AreaType]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[OL_AreaType.BUSINESS]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1696926273934</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1696865272436</Id>
					<Name><![CDATA[p_simulationYear]]></Name>
					<X>619</X><Y>149</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[2023]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1696865272434</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1716549753898</Id>
					<Name><![CDATA[p_selectedProject]]></Name>
					<X>860</X><Y>130</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[OL_Project]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[OL_Project.SCALE]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1716549753896</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1718260268596</Id>
					<Name><![CDATA[p_runHeadlessAtStartup]]></Name>
					<X>620</X><Y>170</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[boolean]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[false]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1718260268594</Id>
							<EditorContolType>CHECK_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="CollectionVariable">
					<Id>1711114179182</Id>
					<Name><![CDATA[c_connectionOwnerNames]]></Name>
					<X>109</X><Y>699</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" AccessType="public" StaticVariable="false">
						<CollectionClass><![CDATA[ArrayList]]></CollectionClass>
						<ElementClass><![CDATA[String]]></ElementClass>
						<ValueElementClass><![CDATA[String]]></ValueElementClass>
					</Properties>

				</Variable>
				<Variable Class="CollectionVariable">
					<Id>1711119607806</Id>
					<Name><![CDATA[c_surveyCompanies]]></Name>
					<X>109</X><Y>679</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" AccessType="public" StaticVariable="false">
						<CollectionClass><![CDATA[ArrayList]]></CollectionClass>
						<ElementClass><![CDATA[String]]></ElementClass>
						<ValueElementClass><![CDATA[String]]></ValueElementClass>
					</Properties>

				</Variable>
			</Variables>
			<Functions>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1697017019953</Id>
					<Name><![CDATA[f_createGISRegionOutline]]></Name>
					<Description><![CDATA[Creates the outline of the simulated area]]></Description>
					<X>359</X><Y>459</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[String delims = " ";
String[] tokens;
GISRegion gisregion = null;

// Create neighborhood and draw them
List<Tuple> rowsA = selectFrom(wijken).list();

for (Tuple row : rowsA) {	
	GIS_Area a = energyModel.add_pop_GIS_Area();
	a.p_areaID = row.get(wijken.buurtnaam);
	//a.p_AreaType = row.get(wijken.wijktype);
	
	a.p_GISRegionAreacoords = row.get(wijken.wkt_geom);	
	
	//Create gisregion
	a.gisRegion = zero_Interface.f_createGISObject(f_createGISObjectsTokens(a.p_GISRegionAreacoords));
	zero_Interface.f_styleSimulationAreas(a.gisRegion, a.p_areaID);
	
	a.gisRegion = gisregion;
	zero_Interface.c_GISRegions.add(gisregion);
}

]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1697095071210</Id>
					<Name><![CDATA[f_generateGridConnections]]></Name>
					<X>100</X><Y>330</Y>
					<Label><X>11</X><Y>1</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[//Energy production sites
f_generateSolarParks();
f_generateWindFarms();

//Other infra
f_generateElectrolysers();
//f_generateBatteries();
//f_createChargingStations();

//Consumers
if ( p_selectedProject == OL_Project.HESSENPOORT ) {
	f_createSurveyCompanies();
}
if ( p_selectedProject == OL_Project.HESSENPOORT || p_selectedProject == OL_Project.DEWIEKEN ){
	f_createCompanies();
}
if (p_selectedProject == OL_Project.SCALE) {
	f_createChargingStationsScale(10);
}
if ( p_selectedProject == OL_Project.TUINZIGT || p_selectedProject == OL_Project.SCALE){
	f_createHousesFromDatabase();
}


//f_createCompaniesGOED(); // Deze gebruiken als het geen hessenpoort of de wieken is

]]></Body>
				</Function>
				<Function AccessType="public" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1697096723758</Id>
					<Name><![CDATA[f_configureBackBoneZero]]></Name>
					<Description><![CDATA[Generieke functie die flexibele modelconfiguratie mogelijk maakt op basis van externe data. Expliciet gemodelleerd om profiling en volgorde van initialisatie te kunnen controleren.

@param: none
@return: none
@since: Sprint 6
@author: Jorrit]]></Description>
					<X>89</X><Y>149</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[//Project selection

/*
switch (p_selectedProject){

case HESSENPOORT: 
	p_projectIndex = 1;
	//zero_Interface.p_projectIndex = 1;
break;

case DEWIEKEN:
	p_projectIndex = 2;
	zero_Interface.p_projectIndex = 2;
break;

case TUINZIGT:
	p_projectIndex = 3;
	zero_Interface.p_projectIndex = 3;
break;

case ANDERS:
	p_projectIndex = 0;
	zero_Interface.p_projectIndex = 0;
break;
}
*/

//Import excel data to the anylogic database
f_importExcelTablesToDB();

//Set basic input files
energyModel.p_truckTripsExcel = inputTruckTrips;
energyModel.p_householdTripsExcel = inputHouseholdTrips;
energyModel.p_cookingPatternExcel = inputCookingActivities;


//Actors
f_createActors();

//Grid nodes
f_generateGridNodes();

//Grid connections
f_generateGridConnections();

//Additional GIS objects
f_createGISRegionOutline();
f_createParcels();
f_createRemainingBuildings();

energyModel.f_initializeEngine();
//f_PreZeroDatabaseRequest();]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1698752016115</Id>
					<Name><![CDATA[f_generateGridNodes]]></Name>
					<X>99</X><Y>259</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[double latitude_c;
double longitude_c;
OL_GridNodeType nodeType;
GISRegion gisregion;

//Grid operator (for now only one in the area)
GridOperator Grid_Operator = findFirst(energyModel.pop_gridOperators, p->p.p_actorID.equals(project_data.grid_operator)) ;

// Generate 'hardcoded' HVMV gridNode (only if not specified in transfromers table)
//f_generateHVMVManually();


// Get trip tuples from the gridnode database
List<Tuple> rows = selectFrom(trafostations).list();

for (Tuple row : rows) {
	if(row.get(trafostations.innetwork).equals("ja") ){	
		GridNode GN = energyModel.add_pop_gridNodes();
		GN.p_gridNodeID = row.get( trafostations.id);
		
		
		//Check wether transformer capacity is known or estimated
		if( row.get( trafostations.capacity_available ).equals("no")) {
			GN.p_capacity_kW= row.get( trafostations.capacity_estimated);	
			GN.p_realCapacityAvailable = false;
		}
		else {
			GN.p_capacity_kW= row.get( trafostations.nominal_power);
			GN.p_realCapacityAvailable = true;
		}
		
		//Basic GN information
		GN.p_nodeStatus = row.get( trafostations.currentsta );
		//GN.validFrom = row.get( trafostations.validfrom );
		GN.p_description = row.get( trafostations.omschrijvi);
		String nodeTypeString = row.get( trafostations.type);
		
		//Connect
		GN.p_parentNodeID= row.get( trafostations.parent_node_id);// Needs to be manually defined in the excel file of the nodes!
		GN.p_ownerGridOperator = Grid_Operator;
		
		
		//Define node type
		if (nodeTypeString.equals("mvlv")){
			GN.p_nodeType = OL_GridNodeType.MVLV;
			//energyModel.f_getGridNodesNotTopLevel().add(GN);
			GN.p_energyType = OL_EnergyCarrierType.ELECTRICITY;
		} 
		else if (nodeTypeString.equals("hvmv")){
			GN.p_nodeType = OL_GridNodeType.HVMV;
			//energyModel.f_getGridNodesTopLevel().add(GN);
			GN.p_energyType = OL_EnergyCarrierType.ELECTRICITY;
		}
		else {
			traceln("There is a gridnode in your input file with an incorrect node type");
		}
		
		//Define GN location
		GN.p_longitude = row.get( trafostations.longitude );
		GN.p_latitude = row.get( trafostations.latitude );
		GN.setLatLon(GN.p_latitude, GN.p_longitude);
		
		//Create gis region
		GN.gisRegion = zero_Interface.f_createGISObject(f_createGISNodesTokens(GN));
		zero_Interface.f_styleGridNodes(GN);

		zero_Interface.c_GISNodes.add(GN.gisRegion);
		Grid_Operator.c_electricityGridNodes.add(GN);
	}
}

/*
// Connect grid nodes with eachother (Do this only after all GridNodes have been created! Or connections might be missed!)
for( GridNode GN : energyModel.pop_gridNodes ) {
	GN.f_connectToParentNode();
}
*/
]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[double[]]]></ReturnType>
					<Id>1702385737139</Id>
					<Name><![CDATA[f_createGISObjectsTokens]]></Name>
					<X>379</X><Y>539</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[RegionCoords]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Body><![CDATA[if (RegionCoords.startsWith( "Multi")){
	RegionCoords = RegionCoords.replace("MultiPolygon (((","");
	RegionCoords = RegionCoords.replace(",","");
	RegionCoords = RegionCoords.replace(")))","");
}
else if( RegionCoords.startsWith( "Poly") ){
	RegionCoords = RegionCoords.replace("Polygon ((","");
	RegionCoords = RegionCoords.replace(",","");
	RegionCoords = RegionCoords.replace("))","");
}
else {
	traceln("GIS coordinaten in de excel data die niet starten met Multi of Poly");
}

if (RegionCoords.contains(")(")) {
	RegionCoords = RegionCoords.split("\\)")[0];
}

String delims = " ";
String[] tokens;
tokens = RegionCoords.split(delims);

int nbCoords = tokens.length;
double[] GISCoords = new double[nbCoords];
		
for (int i=0; i<nbCoords; i++) {
	if (i % 2 == 0) { // latitudes
		GISCoords[i]=Double.parseDouble(tokens[i+1]);
	} else { // longitudes
		GISCoords[i]=Double.parseDouble(tokens[i-1]);
	}
}
return GISCoords;]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1702550476457</Id>
					<Name><![CDATA[f_importExcelTablesToDB]]></Name>
					<Description><![CDATA[Automatisch inladen van excel files uit de model map naar de database.

@author: Ate
@since: 14-12-23]]></Description>
					<X>860</X><Y>240</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[//Project selection info
ModelDatabase modelDB = getEngine().getModelDatabase();
Database myFileP = new Database(this, "project_info", "project_info.xlsx"); 
modelDB.importFromExternalDB(myFileP.getConnection(), "project_info", "project_info", true, false);

f_setProjectSpecificInput();

String ingeladenProject = selectFrom(project_info)
	.where(project_info.currently_selected.eq(true))
	.firstResult(project_info.project_name);
	
boolean updateProjectInput = false;	
if (! ingeladenProject.equals( p_selectedProject.toString())){
	
	updateProjectInput = true;
	
	for(int i = 1; i <= inputProjectInfo.getLastRowNum(1) - 1; i++){
		if (project_data.project_id == i){
			inputProjectInfo.setCellValue(true, "project_info", i+1, 1);
		}
		else{
		inputProjectInfo.setCellValue(false, "project_info", i+1, 1);
		}
	}
}

if( updateProjectInput || v_forceReloadProjectData ){
	String filePath;
	File file;
	
	//Wijken
	filePath = "data_" + project_data.project_name + "/Wijken_" + project_data.project_name + ".xlsx";
	file = new File(filePath);
	if (file.exists()){
		Database myFileWIJKEN = new Database(this, "wijken", filePath);
		modelDB.importFromExternalDB(myFileWIJKEN.getConnection(), "wijken", "wijken", true, false);
	}
	else {
		traceln("Model should have an input file with area scope");
	}

	
	//Buildings
	filePath = "data_" + project_data.project_name + "/Panden_" + project_data.project_name + ".xlsx";
	file = new File(filePath);
	if ( file.exists()){
		Database myFilePANDEN = new Database(this, "panden", filePath);
		modelDB.importFromExternalDB(myFilePANDEN.getConnection(), "Panden", "panden", true, false);
	}
	else {
		traceln("Model should have an input file with buildings");
	}

	
	//MVLV transformer data
	filePath = "data_" + project_data.project_name + "/Trafostations_" + project_data.project_name + ".xlsx";
	file = new File(filePath);
	if (file.exists()){
		Database myFileTRAFO = new Database(this, "trafostations", filePath);
		modelDB.importFromExternalDB(myFileTRAFO.getConnection(), "trafostations", "trafostations", true, false);
	}
	else {
		traceln("Model should have an input file with trafo stations");
	}
		
	//Bedrijven
	filePath = "data_" + project_data.project_name + "/Bedrijven_" + project_data.project_name + ".xlsx";
	file = new File(filePath);
	if (!file.exists()){
		filePath = "data_Generic/generieke_input/Bedrijven.xlsx";
	}
	Database myFileBEDRIJVEN = new Database(this, "bedrijven", filePath);
	modelDB.importFromExternalDB(myFileBEDRIJVEN.getConnection(), "bedrijven", "bedrijven", true, false);
		
	//Zonnevelden
	filePath = "data_" + project_data.project_name + "/Zonnevelden_" + project_data.project_name + ".xlsx";
	file = new File(filePath);
	if (! file.exists()){
		filePath = "data_Generic/generieke_input/Zonnevelden.xlsx";
	}
	Database myFileZON = new Database(this, "zonnevelden", filePath);
	modelDB.importFromExternalDB(myFileZON.getConnection(), "zonnevelden", "zonnevelden", true, false);	
	
	//Windparken
	filePath = "data_" + project_data.project_name + "/Windparken_" + project_data.project_name + ".xlsx";
	file = new File(filePath);
	if (! file.exists()){
		filePath = "data_Generic/generieke_input/Windparken.xlsx";
	}
	Database myFileWIND = new Database(this, "windparken", filePath);
	modelDB.importFromExternalDB(myFileWIND.getConnection(), "windparken", "windparken", true, false);	
	
	//Batterijen
	filePath = "data_" + project_data.project_name + "/Batterijen_" + project_data.project_name + ".xlsx";
	file = new File(filePath);
	if (!file.exists()){
		filePath = "data_Generic/generieke_input/Batterijen.xlsx";
	}
	Database myFileBAT = new Database(this, "batterijen", filePath);
	modelDB.importFromExternalDB(myFileBAT.getConnection(), "batterijen", "batterijen", true, false);
	
	//Electrolysers
	filePath = "data_" + project_data.project_name + "/Electrolysers_" + project_data.project_name + ".xlsx";
	file = new File(filePath);
	if (!file.exists()){
		filePath = "data_Generic/generieke_input/Electrolysers.xlsx";
	}
	Database myFileH2E = new Database(this, "electrolysers", filePath);
	modelDB.importFromExternalDB(myFileH2E.getConnection(), "electrolysers", "electrolysers", true, false);	
	
	//Laadprofielen
	filePath = "data_" + project_data.project_name + "/Laadprofielen_" + project_data.project_name + ".xlsx";
	file = new File(filePath);
	if (!file.exists()){
		filePath = "data_Generic/Laadprofielen_standaard.xlsx";
	}
	Database myFileLaadprofielenNormaal = new Database(this, "charging_profiles", filePath);
	modelDB.importFromExternalDB(myFileLaadprofielenNormaal.getConnection(), "charging_profiles", "charging_profiles", true, false);	
	
	//Laadpunten
	filePath = "data_" + project_data.project_name + "/Laadpunten_" + project_data.project_name + ".xlsx";
	file = new File(filePath);
	if (!file.exists()){
		filePath = "data_Generic/Laadpunten.xlsx";
	}
	Database myFileLaadpunten = new Database(this, "laadpunten", filePath);
	modelDB.importFromExternalDB(myFileLaadpunten.getConnection(), "laadpunten", "laadpunten", true, false);	
	
	if (p_selectedProject != OL_Project.TUINZIGT && p_selectedProject != OL_Project.SCALE  ) {
		//Comp connections
		Database myFileCOMP = new Database(this, "comp_connections", "data_" + project_data.project_name + "/Energiedata_" + project_data.project_name + ".xlsx");
		modelDB.importFromExternalDB(myFileCOMP.getConnection(), "comp_connections", "comp_connections", true, false);
		
		//Comp elec consumption
		Database myFileCELEC = new Database(this, "comp_elec_consumption", "data_" + project_data.project_name + "/Energiedata_" + project_data.project_name + ".xlsx");
		modelDB.importFromExternalDB(myFileCELEC.getConnection(), "comp_elec_consumption", "comp_elec_consumption", true, false);
		
		//Comp gas consumption
		Database myFileCGAS = new Database(this, "comp_gas_consumption", "data_" + project_data.project_name + "/Energiedata_" + project_data.project_name + ".xlsx");
		modelDB.importFromExternalDB(myFileCGAS.getConnection(), "comp_gas_consumption", "comp_gas_consumption", true, false);
	}

	//Percelen
	filePath = "data_" + project_data.project_name + "/Percelen_" + project_data.project_name + ".xlsx";
	file = new File(filePath);
	if (!file.exists()){
		filePath = "data_Generic/generieke_input/Percelen.xlsx";
	}
		Database myFilePERCELEN = new Database(this, "lege_percelen", filePath);
		modelDB.importFromExternalDB(myFilePERCELEN.getConnection(), "lege_percelen", "lege_percelen", true, false);	
	
	//Loading specific data for detail model companies (DMC)
	f_detailModelCompaniesLoadin(modelDB);
	
	//Traceln update complete
	traceln("Database has been updated.");
}

//Run project_data specifc functions 
f_runProjectDataFunctions();]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1703000401360</Id>
					<Name><![CDATA[f_createHousesFromDatabase]]></Name>
					<Description><![CDATA[Creates the houses using a single GC, and their building. After creation, they will be simulated using average values.]]></Description>
					<X>119</X><Y>489</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[int i = 1;
List<Tuple> rows = selectFrom(panden)
	.where(panden.gebruiksdo.eq("woonfunctie"))
	.list();
	
traceln("aantal panden met woonfucntie: " + rows.size());

for (Tuple row : rows) {
	
	GCHouse GCH = energyModel.add_Houses();
	ConnectionOwner	COH = energyModel.add_pop_connectionOwners();
	
	//Set parameters for the Grid Connection
 	GCH.p_gridConnectionID = row.get( panden.identifica );
	GCH.p_ownerID = "Woonhuis" + Integer.toString(i);	//aanname : huiseigenaar is eigenbaas
	
	//pand gegevens
	GCH.p_heatingType = avgc_data.p_avgHouseHeatingMethod ;
	GCH.p_floorSurfaceArea_m2 = row.get( panden.oppervla_1 );
	GCH.p_bouwjaar = row.get( panden.bouwjaar );
	
	//Nageisoleerd
	if (p_selectedProject == OL_Project.TUINZIGT ){
		if (row.get( panden.nageisoleerd ) != null) {
			GCH.p_nageisoleerd = row.get( panden.nageisoleerd );
		}
		else {
			if (GCH.p_bouwjaar < 1980) {
				GCH.p_nageisoleerd = "D";
			}
			else if (GCH.p_bouwjaar < 2000) {
				GCH.p_nageisoleerd = "C";
			}
			else {
				GCH.p_nageisoleerd = "B";
			}
		}		
	}
	//aansluiting gegevens
	GCH.p_connectionCapacity_kW = avgc_data.p_avgHouseConnectionCapacity_kW;
	
	//adres gegevens
	GCH.p_openbareR = row.get(panden.openbare_r);	// straatnaam
	GCH.p_huisnummer = row.get(panden.huisnummer);
	GCH.p_huisletter = row.get( panden.huisletter );
	GCH.p_toevoeging = row.get( panden.toevoeging );
	GCH.p_postcode = row.get( panden.postcode );
	GCH.p_woonplaats = row.get( panden.woonplaats );


	//locatie
	GCH.p_longitude = row.get(panden.longitude);
	GCH.p_latitude = row.get(panden.latitude);
	GCH.setLatLon(GCH.p_latitude, GCH.p_longitude);
	
	//Connect GC to grid node
	//GridNode myParentNodeElectric;
	GCH.p_parentNodeElectricID = row.get( panden.trafo_id );
	
	/*
	if (GCH.p_parentNodeElectricID != null){
		myParentNodeElectric = findFirst(energyModel.pop_gridNodes, p -> p.p_gridNodeID.equals(GCH.p_parentNodeElectricID)) ;
	}
	else {
		double shortestDistance = 100000;
		GridNode closestGridnode = null;
		for( GridNode gn: energyModel.f_getGridNodesNotTopLevel() ){
			double distance = zero_Interface.f_getDistanceOnMap(GCH.p_latitude, GCH.p_longitude, gn.p_latitude, gn.p_longitude);
			traceln("distance %s", distance);
			if ( distance < shortestDistance ){
				shortestDistance = distance;
				closestGridnode = gn;
			}
		}
		myParentNodeElectric = closestGridnode;
		//myParentNodeElectric = GCH.getNearestAgent(energyModel.pop_gridNodes); //deze code werkt niet omdat het househouden in continuos space leeft en niet in GIS space. Dus hij pakt NIET de lat,lon distance.
		GCH.p_parentNodeElectricID = myParentNodeElectric.p_gridNodeID;
	}
	*/
	
	//GCH.l_parentNodeElectric.connectTo(myParentNodeElectric);
	//myParentNodeElectric.f_connectToChild(GCH);
	
	//Set parameters for the Actor: ConnectionOwner
	COH.p_actorID = GCH.p_ownerID;
	COH.p_actorType = OL_ActorType.CONNECTIONOWNER;
	COH.p_connectionOwnerType = OL_ConnectionOwnerType.HOUSEHOLD;
	COH.p_detailedCompany = "nee";
	
	GCH.p_owner = COH;
	
	GIS_Building b;
	
	//Create GIS building
	if(row.get(panden.uniek_pand) == null || row.get(panden.uniek_pand) == true){	
		b = f_createGISBuilding( row, GCH.p_owner );
	}
	else {
		int pandCluster_nr = row.get(panden.pandcluster_nr);
		b = randomWhere(energyModel.c_GISBuildingClusters, x -> x.p_pandcluster_nr == pandCluster_nr);
	}
	
	GCH.c_connectedBuildings.add(b);
	b.c_gridConnectionsInBuilding.add(GCH);
	GCH.p_owner.c_ownedBuildings.add(b);
	
	//Style building
	zero_Interface.f_styleBuildings(b);
	
	//Instantiate energy assets
	double jaarlijksElectriciteitsVerbruik;
	double jaarlijksGasVerbruik;
	try {
		jaarlijksElectriciteitsVerbruik = row.get(panden.verbruik_elektriciteit);
		jaarlijksGasVerbruik = row.get(panden.verbruik_elektriciteit);
	}
	catch (NullPointerException e){
		jaarlijksElectriciteitsVerbruik = 2000;
		jaarlijksGasVerbruik = 2000;
	}
	f_addEnergyAssetsToHouses(GCH, jaarlijksElectriciteitsVerbruik, jaarlijksGasVerbruik );

	i++;
	if (i > 1){
	
		return;
	}
	
}	
]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1703184606918</Id>
					<Name><![CDATA[f_createSubtenant]]></Name>
					<Description><![CDATA[function used to connect the subtenant to the main tenant (connection owner), based on adres data of subtenant and Grid connection. ]]></Description>
					<X>139.001</X><Y>389.001</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[survey]]></Name>
						<Type><![CDATA[com.zenmo.orm.companysurvey.dto.Survey]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[address]]></Name>
						<Type><![CDATA[com.zenmo.orm.companysurvey.dto.Address]]></Type>
					</Parameter>
					<Body><![CDATA[A_SubTenant subtenant = energyModel.add_pop_subTenants();

subtenant.p_actorID = survey.getCompanyName();

subtenant.p_openbareR = address.getStreet();
subtenant.p_huisnummer = String.valueOf(address.getHouseNumber());
subtenant.p_huisletter = address.getStreet();
subtenant.p_toevoeging = address.getHouseNumberSuffix();
subtenant.p_postcode = address.getPostalCode();
subtenant.p_woonplaats = address.getCity();
 	
//Find grid connection that feeds the subtenant (achter de meter)
GridConnection GC = findFirst(energyModel.pop_gridConnections, 
GCU -> Objects.equals(subtenant.p_openbareR, GCU.p_openbareR) && Objects.equals(subtenant.p_huisnummer, GCU.p_huisnummer) && 
Objects.equals(subtenant.p_huisletter, GCU.p_huisletter) && Objects.equals(subtenant.p_toevoeging, GCU.p_toevoeging) && 
Objects.equals(subtenant.p_postcode, GCU.p_postcode) && Objects.equals(subtenant.p_woonplaats, GCU.p_woonplaats));

subtenant.p_mainTenantID = GC.p_ownerID;
subtenant.p_connectedGridConnection = GC;

ConnectionOwner owner = findFirst(energyModel.pop_connectionOwners, p -> p.p_actorID.equals(GC.p_ownerID));
owner.l_subTenant.connectTo(subtenant);
owner.c_subTenants.add(subtenant);
]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1704374898138</Id>
					<Name><![CDATA[f_generateSolarParks]]></Name>
					<Description><![CDATA[Function used to generate solar parks: grid connections and park owner (connection owner actor)]]></Description>
					<X>119.001</X><Y>529.001</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[ConnectionOwner owner;
GCEnergyProduction solarpark;

List<String> existing_actors = new ArrayList();
List<String> existing_solarFields = new ArrayList();


List<Tuple> rows = selectFrom(zonnevelden)
	.list();

for (Tuple row : rows) { // MOET NOG CHECK OF ZONNEVELD ACTOR AL BESTAAT OP, zo ja --> Zonneveld koppelen aan elkaar en niet 2 GC en 2 actoren maken.
	
	if (!existing_solarFields.contains(row.get(zonnevelden.naam))) {
		solarpark = energyModel.add_EnergyProductionSites();

		solarpark.set_p_gridConnectionID( row.get( zonnevelden.naam ) );
		solarpark.set_p_connectionCapacity_kW( row.get( zonnevelden.aansluit_capaciteit_kw ) );
		solarpark.set_p_heatingType( OL_GridConnectionHeatingType.NONE );	
		solarpark.set_p_ownerID( row.get( zonnevelden.eigenaar ) );	
		solarpark.p_parentNodeElectricID = row.get( zonnevelden.trafo_id );
		
		
		//Add EA
		f_addEnergyProduction(solarpark, OL_EnergyAssetType.PHOTOVOLTAIC, "Solar farm" , row.get( zonnevelden.vermogen_kw ));
		
		
		if (!existing_actors.contains(solarpark.p_ownerID)){ // check if owner exists already, if not, create new owner.
			owner = energyModel.add_pop_connectionOwners();
			
			owner.p_actorID = row.get( zonnevelden.eigenaar );
			owner.p_actorType = OL_ActorType.CONNECTIONOWNER;
			owner.p_connectionOwnerType = OL_ConnectionOwnerType.COMPANY;
			owner.p_detailedCompany = "EA_solar";

			existing_actors.add(owner.p_actorID);
		}
		else { // Owner exists already: add new GC to existing owner
			owner = findFirst(energyModel.f_getConnectionOwners(), p -> p.p_actorID.equals(row.get( zonnevelden.eigenaar )));
		}
		
		solarpark.p_owner = owner;
		
		existing_solarFields.add(solarpark.p_gridConnectionID);		
	}
	else { // solarpark and its owner exist already, only create new gis building which is added to the park
		solarpark = findFirst(energyModel.EnergyProductionSites, p -> p.p_gridConnectionID.equals(row.get(zonnevelden.naam)) );
		owner = solarpark.p_owner;		

	}
		
	//Create GIS object for the solar park
	GIS_Building b = f_createGISBuildingEA( row.get( zonnevelden.naam ), row.get( zonnevelden.latitude ), row.get( zonnevelden.longitude ), row.get( zonnevelden.polygon) );
	zero_Interface.f_styleSolarPark(b.gisRegion);
	
	b.c_gridConnectionsInBuilding.add(solarpark);
	solarpark.c_connectedBuildings.add(b);
	owner.c_ownedBuildings.add(b);
}
]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1704458508232</Id>
					<Name><![CDATA[f_generateBatteries]]></Name>
					<Description><![CDATA[Function used to create (neighborhood) battery grid connection and actor]]></Description>
					<X>119.001</X><Y>589</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[List<Tuple> rows = selectFrom(batterijen)
	.list();

for (Tuple row : rows) { // MOET NOG CHECK OF battery ACTOR AL BESTAAT OP, zo ja --> battery koppelen aan elkaar en niet 2 GC en 2 actoren maken.
	
	ConnectionOwner owner = energyModel.add_pop_connectionOwners();
	GCGridBattery gridbattery = energyModel.add_GridBatteries();
	
	owner.p_actorID = row.get( batterijen.eigenaar );
	owner.p_actorType = OL_ActorType.CONNECTIONOWNER;
	owner.p_connectionOwnerType = OL_ConnectionOwnerType.COMPANY;
	owner.p_detailedCompany = "EA_battery";
	
	gridbattery.set_p_gridConnectionID( row.get( batterijen.naam ) );
	gridbattery.set_p_ownerID( row.get( batterijen.eigenaar ) );
	gridbattery.set_p_owner( owner );	
	gridbattery.set_p_connectionCapacity_kW( row.get( batterijen.max_capaciteit_aansluiting_kw ) );
	gridbattery.p_parentNodeElectricID = row.get( batterijen.trafo_id );	
	gridbattery.set_p_heatingType( OL_GridConnectionHeatingType.NONE );	


	//Create gis object for the battery
	GIS_Building b =  f_createGISBuildingEA( row.get( batterijen.naam ), row.get( batterijen.latitude ), row.get( batterijen.longitude ), row.get( batterijen.polygon) );
	zero_Interface.f_styleBattery(b.gisRegion);
	
	gridbattery.c_connectedBuildings.add(b);
	b.c_gridConnectionsInBuilding.add(gridbattery);
	
	//Create energy asset for the battery
	f_addStorage(gridbattery, row.get( batterijen.vermogen_kw ), row.get( batterijen.capaciteit_kwh ), OL_EnergyAssetType.STORAGE_ELECTRIC );	
	
}
]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1704458527002</Id>
					<Name><![CDATA[f_generateElectrolysers]]></Name>
					<Description><![CDATA[Function used to create electrolyser grid connections and actors]]></Description>
					<X>119</X><Y>569</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[ConnectionOwner owner;

List<String> existing_actors = new ArrayList();

List<Tuple> rows = selectFrom(electrolysers)
	.list();

for (Tuple row : rows) {
	GCEnergyConversion H2Electrolyser = energyModel.add_EnergyConversionSites();

	H2Electrolyser.set_p_gridConnectionID( row.get( electrolysers.naam ) );
	H2Electrolyser.set_p_heatingType( OL_GridConnectionHeatingType.NONE );	
	H2Electrolyser.set_p_ownerID( row.get( electrolysers.eigenaar ) );	
	H2Electrolyser.p_parentNodeElectricID = row.get( electrolysers.trafo_id );
	H2Electrolyser.p_connectionCapacity_kW = row.get( electrolysers.connection_capacity_kw );
	
 	//H2Electrolyser.p_conversionEfficiency = row.get( electrolysers.conversion_efficiency );
	//H2Electrolyser.p_powerNominal_kW = row.get(electrolysers.vermogen_kw);
	H2Electrolyser.p_minProductionRatio = row.get(electrolysers.min_production_ratio);

	//Electrolyser operation mode
	if(row.get(electrolysers.operation_mode).equals("price")){
	H2Electrolyser.p_electrolyserOperationMode= OL_ElectrolyserOperationMode.PRICE;
	}
	else{
	H2Electrolyser.p_electrolyserOperationMode= OL_ElectrolyserOperationMode.BALANCE;
	}
	
	//Create EA for the electrolyser GC
	J_EAConversionElectrolyserAte h2ElectrolyserEA = new J_EAConversionElectrolyserAte(H2Electrolyser, OL_ElectrolyserState.STANDBY, row.get(electrolysers.vermogen_kw), row.get( electrolysers.conversion_efficiency ), energyModel.p_timeStep_h, row.get(electrolysers.load_change_time_s), row.get(electrolysers.start_up_time_shutdown_s), row.get(electrolysers.start_up_time_standby_s), row.get(electrolysers.start_up_time_idle_s));
	//}
	/*
	else {
		J_EAConversionElektrolyser h2ElectrolyserEA = new J_EAConversionElektrolyser(H2Electrolyser, H2Electrolyser.p_powerNominal_kW, H2Electrolyser.p_conversionEfficiency, energyModel.p_timeStep_h);
		energyModel.c_energyAssets.add(h2ElectrolyserEA);
		H2Electrolyser.f_connectToJ_EA(h2ElectrolyserEA);
	}
	*/	
	
	if (!existing_actors.contains(H2Electrolyser.p_ownerID)){ // check if owner exists already, if not, create new owner.
		owner = energyModel.add_pop_connectionOwners();
		
		owner.p_actorID = row.get( electrolysers.eigenaar );
		owner.p_actorType = OL_ActorType.CONNECTIONOWNER;
		owner.p_connectionOwnerType = OL_ConnectionOwnerType.COMPANY;
		owner.p_detailedCompany = "EA_electrolyser";

	}
	else { // Owner exists already: add new GC to existing owner
		owner = findFirst(energyModel.f_getConnectionOwners(), p -> p.p_actorID.equals(row.get( electrolysers.eigenaar )));
	}
	
	H2Electrolyser.p_owner = owner;
		
	//Create GIS object for the electrolyser
	GIS_Building b = f_createGISBuildingEA( row.get( electrolysers.naam ), row.get( electrolysers.latitude ), row.get( electrolysers.longitude ), row.get( electrolysers.polygon) );
	zero_Interface.f_styleH2Electrolyser(b.gisRegion);
	
	b.c_gridConnectionsInBuilding.add(H2Electrolyser);
	H2Electrolyser.c_connectedBuildings.add(b);
	owner.c_ownedBuildings.add(b);
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1704458598972</Id>
					<Name><![CDATA[f_generateWindFarms]]></Name>
					<Description><![CDATA[Function used to create all windfarm grid connections, actors, EAs and GISObjects]]></Description>
					<X>119.001</X><Y>549</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[ConnectionOwner owner;
GCEnergyProduction windfarm;

List<String> existing_actors = new ArrayList();
List<String> existing_windFarms = new ArrayList();


List<Tuple> rows = selectFrom(windparken)
	.list();

for (Tuple row : rows) {
	if (!existing_windFarms.contains(row.get(zonnevelden.naam))) { // Check if windfarm exists already, if not, create new windfarm GC + turbine
		windfarm = energyModel.add_EnergyProductionSites();

		windfarm.set_p_gridConnectionID( row.get( windparken.naam ) );
		
		windfarm.set_p_connectionCapacity_kW( row.get( windparken.aansluit_capaciteit_kw ) );
		windfarm.set_p_heatingType( OL_GridConnectionHeatingType.NONE );	
		windfarm.set_p_ownerID( row.get( windparken.eigenaar ) );	
		windfarm.p_parentNodeElectricID = row.get( windparken.trafo_id );
		
		//Create EA for the windturbine GC
		f_addEnergyProduction(windfarm, OL_EnergyAssetType.WINDMILL, "Windmill onshore", row.get( windparken.vermogen_kw ));
		
		if (!existing_actors.contains(windfarm.p_ownerID)){ // check if owner exists already, if not, create new owner.
			owner = energyModel.add_pop_connectionOwners();
			
			owner.p_actorID = row.get( windparken.eigenaar );
			owner.p_actorType = OL_ActorType.CONNECTIONOWNER;
			owner.p_connectionOwnerType = OL_ConnectionOwnerType.COMPANY;
			owner.p_detailedCompany = "EA_wind";
		}
		else { // Owner exists already: add new GC to existing owner
			owner = findFirst(energyModel.f_getConnectionOwners(), p -> p.p_actorID.equals(row.get( windparken.eigenaar )));
		}
		
		windfarm.p_owner = owner;
		
	}
	else { // winfarm and its owner exist already, only create new gis building which is added to the farm
		windfarm = findFirst(energyModel.EnergyProductionSites, p -> p.p_gridConnectionID.equals(row.get(windparken.naam)) );
		owner = windfarm.p_owner;		

	}
		
	//Create GIS object for the windfarm
	GIS_Building b = f_createGISBuildingEA( row.get( windparken.naam ), row.get( windparken.latitude ), row.get( windparken.longitude ), row.get( windparken.polygon) );
	zero_Interface.f_styleWindFarm(b.gisRegion);
	
	b.c_gridConnectionsInBuilding.add(windfarm);
	windfarm.c_connectedBuildings.add(b);
	owner.c_ownedBuildings.add(b);
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1705073259507</Id>
					<Name><![CDATA[f_generateHVMVManually]]></Name>
					<Description><![CDATA[generate HVMV node/station manually]]></Description>
					<ExcludeFromBuild>true</ExcludeFromBuild>
					<X>-450</X><Y>110</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[// Create the HVMV station
GridNode GN_main = energyModel.add_pop_gridNodes();
GN_main.p_energyType = OL_EnergyCarrierType.ELECTRICITY;		
GN_main.p_gridNodeID = "HVMV";
GN_main.p_description = "Netstation";
GN_main.p_nodeType = OL_GridNodeType.HSMS;
GN_main.p_parentNodeID= "-"; 
GN_main.p_ownerGridOperator = findFirst(energyModel.pop_gridOperators, p->p.p_actorID.equals(project_data.grid_operator)) ;


// Adjustable parameters //
GN_main.p_capacity_kW= 12000;
GN_main.p_latitude = 52.535;
GN_main.p_longitude = 6.1883636845;


//Generate/style gisregion on map
GN_main.setLatLon(GN_main.p_latitude, GN_main.p_longitude);
GISRegion gisregion = new GISRegion(map,f_createGISNodesTokens(GN_main));
f_styleGridNodes(gisregion, GN_main.p_nodeType);
	
energyModel.c_gridNodesHSMS.add(GN_main);
c_GISNodes.add(gisregion);

]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[double[]]]></ReturnType>
					<Id>1705503535395</Id>
					<Name><![CDATA[f_createGISNodesTokens]]></Name>
					<X>119</X><Y>279</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[GN]]></Name>
						<Type><![CDATA[GridNode]]></Type>
					</Parameter>
					<Body><![CDATA[double scaling_factor_HSMS = 50;
double scaling_factor_MSLS = 21;
int nb_GISCoords;

switch( GN.p_nodeType ) {
		case HVMV:
		nb_GISCoords = 8;
		break;
		case MVLV:
		nb_GISCoords = 6;
		break;
		case HT:
		nb_GISCoords = 6;	
		break;
		case MT:
		nb_GISCoords = 6;	
		break;
		case LT:
		nb_GISCoords = 6;	
		break;
		case LT5thgen:
		nb_GISCoords = 6;	
		break;
		default:
		nb_GISCoords = 6;
}

double[] GISCoords = new double[nb_GISCoords];

switch( GN.p_nodeType ) {
		case HVMV:
						
			//latitudes
			GISCoords[0]=GN.p_latitude;
			GISCoords[2]=GN.p_latitude - scaling_factor_HSMS*0.00001;
			GISCoords[4]=GN.p_latitude;
			GISCoords[6]=GN.p_latitude + scaling_factor_HSMS*0.00001;
			
			//longitudes
			GISCoords[1]=GN.p_longitude;
			GISCoords[3]=GN.p_longitude + scaling_factor_HSMS*0.00001;
			GISCoords[5]=GN.p_longitude + scaling_factor_HSMS*0.00001*2;
			GISCoords[7]=GN.p_longitude + scaling_factor_HSMS*0.00001;
			
			// if you want Circle coordinates -->
			//x = r * cos(t) + a
			//y = r * sin(t) + b
			//t is an angle between 0 and 2π (more steps is more circle points, about 10-12 should suffice. --> adjust nb_GISCoords accordingly
			// r is the radius: 0.000009 degrees in latitude is about 1 meter 
			// a and b are latitude and longitude
		break;
		case MVLV:
			
			//double[] GISCoords = new double[6]; 
			
			//latitudes
			GISCoords[0]=GN.p_latitude;
			GISCoords[2]=GN.p_latitude - scaling_factor_MSLS*0.00001;
			GISCoords[4]=GN.p_latitude - scaling_factor_MSLS*0.00001;
			
			//longitudes
			GISCoords[1]=GN.p_longitude;
			GISCoords[3]=GN.p_longitude + scaling_factor_MSLS*0.00001;
			GISCoords[5]=GN.p_longitude - scaling_factor_MSLS*0.00001;
			
		break;
		case HT:
			
		break;
		case MT:
			
		break;
		case LT:
			
		break;
		case LT5thgen:
			
		break;
}


return GISCoords;





]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[boolean]]></ReturnType>
					<Id>1705966783944</Id>
					<Name><![CDATA[f_setProjectSpecificInput]]></Name>
					<Description><![CDATA[Selects data file names and information of the selected project, which will be implemented in the ExcelTablesToDB function to fill the database with the correct values and create the right actors]]></Description>
					<X>870</X><Y>260</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[int row_number;
OL_Project project_name;

// Get the tuples from the project data excel file
List<Tuple> rows = selectFrom(project_info).list();

for (Tuple row : rows) {
	if (row.get( project_info.project_name).toString().equals(p_selectedProject.toString())){
		//Project ID
		project_data.project_name = row.get( project_info.project_name);
		project_data.project_id = row.get( project_info.project_id);
				
		//Area specific actors
		project_data.grid_operator = row.get( project_info.grid_operator);
		project_data.energy_coop = row.get( project_info.energy_coop);
		
		//Area specific energy consumption values
		project_data.total_electricity_consumption_companies_kWh_p_yr = row.get(project_info.total_comp_elec_demand_kwhyr);
		project_data.total_gas_consumption_companies_m3_p_yr = row.get(project_info.total_comp_gas_demand_m3yr);
		project_data.avg_electricity_consumption_house_kWh_p_yr = row.get(project_info.avg_house_elec_demand_kwhyr);
		project_data.avg_gas_consumption_house_m3_p_yr = row.get(project_info.avg_house_gas_demand_m3yr);
		project_data.total_cars_houses = row.get(project_info.total_nr_cars);
		project_data.total_vans_companies = row.get(project_info.total_nr_vans);	
		project_data.total_trucks_companies = row.get(project_info.total_nr_trucks);		
		
		//Map starting point
		project_data.map_centre_latitude = row.get( project_info.map_centre_latitude);
		project_data.map_centre_longitude = row.get( project_info.map_centre_longitude);	
		
		return;
	}
}


	]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1706000808091</Id>
					<Name><![CDATA[f_createEnergyActors]]></Name>
					<Description><![CDATA[Function used to generate specific actors like grid operator, energy supplier and energy coop. Actors used to create variable pricing.]]></Description>
					<X>119</X><Y>189</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[// Create the grid operator
GridOperator GO = energyModel.add_pop_gridOperators();

GO.p_actorID = project_data.grid_operator;
GO.p_actorType = OL_ActorType.OPERATORGRID;
GO.p_hasCongestionPricing = false; // ???????? variabel maken per project


// Create the energy coop
if (!project_data.energy_coop.equals("None")){
	
	EnergyCoop EC = energyModel.add_pop_energyCoops();
	
	EC.p_actorID = project_data.energy_coop;
	EC.p_actorType = OL_ActorType.COOPENERGY;
	EC.p_gridOperator = GO;
	//EC.p_CoopParent = EC.p_actorID; // WAT BETEKENT COOP PARENT??
	
	//Extra variabelen variabel maken per project!!!????
}


// Energy supplier
if (!project_data.energy_supplier.equals("None")){
	
	EnergySupplier ES = energyModel.add_pop_energySuppliers(); 
	
	ES.p_actorID = project_data.energy_supplier;
	ES.p_actorType = OL_ActorType.SUPPLIERENERGY;
}

]]></Body>
				</Function>
				<Function AccessType="public" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1706099205522</Id>
					<Name><![CDATA[f_setWeatherMarketData]]></Name>
					<Description><![CDATA[Functie van gillis voor inladen weer data!]]></Description>
					<X>89</X><Y>129</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[List<Double> argumentsList = selectFrom( profiles ).list( profiles.t_h );

// Various demand profiles

List<Double> houseEdemandList = selectFrom( profiles ).list( profiles.house_e_demand_other );
List<Double> houseHDHWdemandList = selectFrom( profiles ).list( profiles.house_h_demand_hot_water );
List<Double> buildingEdemandList = selectFrom( profiles ).list( profiles.building_e_demand_other );
List<Double> buildingHeatDemandList = selectFrom( profiles ).list( profiles.building_h_demand );
List<Double> industrySteelEdemandList = selectFrom( profiles ).list( profiles.industry_steel_e_demand );
List<Double> industrySteelHdemandList = selectFrom( profiles ).list( profiles.industry_steel_h_demand );
List<Double> industryOtherEdemandList = selectFrom( profiles ).list( profiles.industry_other_e_demand );
List<Double> industryOtherHdemandList = selectFrom( profiles ).list( profiles.industry_other_h_demand );
List<Double> logisticsFleetEdemandList = selectFrom( profiles ).list( profiles.logistics_fleet_e_hgv );     
 
// Weather data
List<Double> windList = selectFrom( profiles ).list( profiles.wind_e_prod_normalized );
List<Double> solarList = selectFrom( profiles ).list( profiles.solar_e_prod_normalized );
List<Double> tempList = selectFrom( profiles ).list( profiles.ambient_temperature_deg_c );
List<Double> epexList = selectFrom( profiles ).list( profiles.day_ahead_price_eur_mwh ); 

/*boolean b_use2023data=false;
if (b_use2023data) {
       windList = selectFrom( weather2023 ).list( weather2023.wind_e_prod_normalized );
       solarList = selectFrom( weather2023 ).list( weather2023.solar_e_prod_normalized );
       tempList = selectFrom( weather2023 ).list( weather2023.ambient_temperature_deg_c );
       epexList = selectFrom( weather2023 ).list( weather2023.day_ahead_price_eur_mwh );  
}*/
 
double[] a_arguments = new double[argumentsList.size()];
double[] a_windValues = new double[argumentsList.size()];
double[] a_solarValues = new double[argumentsList.size()];
double[] a_tempValues = new double[argumentsList.size()];
double[] a_houseEdemand = new double[argumentsList.size()];
double[] a_houseDHWdemand = new double[argumentsList.size()];
double[] a_buildingEdemand = new double[argumentsList.size()];
double[] a_buildingHeatDemand = new double[argumentsList.size()];
double[] a_industrySteelEdemand = new double[argumentsList.size()];
double[] a_industrySteelHdemand = new double[argumentsList.size()];
double[] a_industryOtherEdemand = new double[argumentsList.size()];
double[] a_industryOtherHdemand = new double[argumentsList.size()];
double[] a_logisticsFleetEdemand = new double[argumentsList.size()];  
double[] a_epexValues = new double[argumentsList.size()];
            
for(int i = 0; i < argumentsList.size(); i++) {
       a_arguments[i] = argumentsList.get(i);
       a_windValues[i] = windList.get(i);
       a_solarValues[i] = solarList.get(i);
       a_tempValues[i] = tempList.get(i);
       a_houseEdemand[i] = houseEdemandList.get(i);
       a_houseDHWdemand[i] = houseHDHWdemandList.get(i);
       a_buildingEdemand[i] = buildingEdemandList.get(i);
       a_buildingHeatDemand[i] = buildingHeatDemandList.get(i);
       a_industrySteelEdemand[i] = industrySteelEdemandList.get(i);
       a_industrySteelHdemand[i] = industrySteelHdemandList.get(i);
       a_industryOtherEdemand[i] = industryOtherEdemandList.get(i);
       a_industryOtherHdemand[i] = industryOtherHdemandList.get(i);
       a_logisticsFleetEdemand[i] = logisticsFleetEdemandList.get(i);        
       a_epexValues[i] = epexList.get(i);
}
 
energyModel.tf_p_wind_e_normalized.setArgumentsAndValues(a_arguments, a_windValues);
energyModel.tf_p_solar_e_normalized.setArgumentsAndValues(a_arguments, a_solarValues);
energyModel.tf_ambientTemperature_degC.setArgumentsAndValues(a_arguments, a_tempValues);
energyModel.tf_p_house_e_demand_other.setArgumentsAndValues(a_arguments, a_houseEdemand);
energyModel.tf_p_house_h_demand_hot_water.setArgumentsAndValues(a_arguments, a_houseDHWdemand);
energyModel.tf_p_building_e_demand_other.setArgumentsAndValues(a_arguments, a_buildingEdemand);
energyModel.tf_p_building_h_demand.setArgumentsAndValues(a_arguments, a_buildingHeatDemand);
energyModel.tf_p_industry_other_e_demand.setArgumentsAndValues(a_arguments, a_industryOtherEdemand);
energyModel.tf_p_industry_other_h_demand.setArgumentsAndValues(a_arguments, a_industryOtherHdemand);
energyModel.tf_p_industry_steel_e_demand.setArgumentsAndValues(a_arguments, a_industrySteelEdemand);
energyModel.tf_p_industry_steel_h_demand.setArgumentsAndValues(a_arguments, a_industrySteelHdemand);
energyModel.tf_p_logistics_fleet_e_hgv.setArgumentsAndValues(a_arguments, a_logisticsFleetEdemand);
energyModel.tf_dayAheadElectricityPricing_eurpMWh.setArgumentsAndValues(a_arguments, a_epexValues);

]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1707903714052</Id>
					<Name><![CDATA[f_detailModelCompanies]]></Name>
					<Description><![CDATA[Niet generieke data lijst van bedrijven voor aanmaken specifieke agents.
P]]></Description>
					<X>880</X><Y>300</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[if (p_selectedProject == OL_Project.HESSENPOORT){ // Hessenpoort detail model bedrijven

project_data.c_detailModelCompanies.add("Wehkamp");
project_data.c_detailModelCompanies.add("prezero");
//project_data.c_detailModelCompanies.add("-");
}

else if (p_selectedProject == OL_Project.DEWIEKEN){ // De Wieken detail model bedrijven

//project_data.c_detailModelCompanies.add("-");

}










]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1707910602898</Id>
					<Name><![CDATA[f_detailModelCompaniesLoadin]]></Name>
					<X>870</X><Y>280</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[modelDB]]></Name>
						<Type><![CDATA[ModelDatabase]]></Type>
					</Parameter>
					<Body><![CDATA[int i = 0;

//Defined detailed model company names (no CAPITAL letters, only small)
f_detailModelCompanies();

while(i < project_data.c_detailModelCompanies.size()){

	//Loading in the specific company data
	Database myFileDMC = new Database(this, project_data.c_detailModelCompanies.get(i), "data_" + project_data.project_name + "/DMC_" + project_data.project_name + ".xlsx");
	modelDB.importFromExternalDB(myFileDMC.getConnection(), project_data.c_detailModelCompanies.get(i), project_data.c_detailModelCompanies.get(i), true, false);
	
	i++;	
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1708199857700</Id>
					<Name><![CDATA[f_createCompanies]]></Name>
					<Description><![CDATA[Creating the companies (using a single GC) + owned buildings, that have not filled in the survey. If created, they will be simulated using average values, scaled with the totals (CBS data) of the area.]]></Description>
					<X>120</X><Y>430</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[//Initialize variables
GCUtility companyGC;
int i = 0;
List<GridConnection> generic_company_GCs = new ArrayList();


List<Tuple> rows = selectFrom(panden)
	.where(panden.bedrijf.ne("-"))
	.where(panden.gebruiksdo.ne("woonfunctie"))
	.list();


for (Tuple row : rows) {
	if (c_surveyCompanies.contains(row.get(panden.bedrijf))){ // Check if company has filled in the survey already, if yes: skip this row.
		continue;
	}	
	
	companyGC = findFirst(energyModel.UtilityConnections, p -> p.p_ownerID.equals(row.get(panden.bedrijf)) ); // check if GC exists already (dont want multiple GC for all buildings)
	
	if (companyGC == null){ // only usable for wieken/hessenpoort, due to already available data
		
		companyGC = energyModel.add_UtilityConnections();
				  
		generic_company_GCs.add(companyGC);
		
		//Set parameters for the Grid Connection
		companyGC.p_ownerID = row.get(panden.bedrijf);
		
		if (p_selectedProject == OL_Project.DEWIEKEN){ // Leaving this in for the Wieken for now
	 		companyGC.p_gridConnectionID = row.get( panden.detail_id );
	 	}
	 	else{
	 		companyGC.p_gridConnectionID = row.get( panden.identifica);
	 	}
		
		// Check that is needed until connectioncapacity is no longer in 'Panden' excel
		if (row.get(panden.netaansluiting_capaciteit_kw).equals(-1)){
			companyGC.p_connectionCapacity_kW = avgc_data.p_avgUtilityConnectionCapacity_kW;
		}
		else{
			companyGC.p_connectionCapacity_kW = row.get(panden.netaansluiting_capaciteit_kw);
		}
		
		companyGC.p_heatingType = avgc_data.p_avgCompanyHeatingMethod; // Assuming all avg companies have GASBURNER. OLD: f_setHeatingType( row.get(panden.verwarming_type ));
		companyGC.p_openbareR = row.get(panden.openbare_r); //straat
		companyGC.p_huisnummer = row.get(panden.huisnummer);
		companyGC.p_huisletter = row.get( panden.huisletter );
		companyGC.p_toevoeging = row.get( panden.toevoeging );
		companyGC.p_postcode = row.get( panden.postcode );
		companyGC.p_woonplaats = row.get( panden.woonplaats );
		
		
		//Set location of GC
	 	companyGC.p_latitude = row.get( panden.latitude); 
	 	companyGC.p_longitude = row.get( panden.longitude);
	 	companyGC.setLatLon(companyGC.p_latitude, companyGC.p_longitude);  
	 	
	 	
		//Connect GC to grid node
		companyGC.p_parentNodeElectricID = row.get( panden.trafo_id );
		
		/*
		if (companyGC.p_parentNodeElectricID == null){
			//Set nearest gridnode as trafo
			GridNode nearestLVStation = companyGC.getNearestAgent(energyModel.f_getGridNodesNotTopLevel());
			companyGC.p_parentNodeElectricID = nearestLVStation.p_gridNodeID;
		}
		*/

		// If actor exists, assign GC to the actor, if not: create new actor and assign GC to that
		ConnectionOwner COC;
		if (c_connectionOwnerNames.contains(row.get(panden.bedrijf))) {
			COC = findFirst(energyModel.pop_connectionOwners, p -> p.p_actorID.equals(row.get(panden.bedrijf)) );
			if (p_selectedProject == OL_Project.HESSENPOORT) {
				COC.p_detailedCompany = "nee";
			}
		}
		
		else { // Create new actor
			COC = energyModel.add_pop_connectionOwners(); // Create Connection owner company
			
			COC.p_actorID = row.get(panden.bedrijf);
			COC.p_actorType = OL_ActorType.CONNECTIONOWNER;
			COC.p_connectionOwnerType = OL_ConnectionOwnerType.COMPANY;
			COC.p_detailedCompany = "nee";
		}
		companyGC.p_owner = COC;	
	}
	
	//Create GIS object and connect
	GIS_Building b = f_createGISBuilding( row, companyGC.p_owner );
	
	companyGC.c_connectedBuildings.add(b);
	b.c_gridConnectionsInBuilding.add(companyGC);
	companyGC.p_owner.c_ownedBuildings.add(b);
	
	//Style building
	zero_Interface.f_styleBuildings(b);
	
	
	
}

v_amountOfCompaniesNoSurvey = c_connectionOwnerNames.size() - c_surveyCompanies.size();
traceln("");
traceln("Amount of companies created without survey: " + v_amountOfCompaniesNoSurvey);


//Calculate the amount of trucks that still need to be distributed over the area
if (v_amountOfCompaniesNoSurvey != 0) {
	v_remainingAmountOfTrucks_per_genericCompany = max(v_remainingAmountOfTrucks/v_amountOfCompaniesNoSurvey, 0);
	v_remainingAmountOfVans_per_genericCompany = max(v_remainingAmountOfVans/v_amountOfCompaniesNoSurvey, 0);
}
//Nadat grid connections aangemaakt zijn, Moet omdat totale oppervlaktes niet vooraf bekend zijn 
for (GridConnection GCcompany : generic_company_GCs ) {
	

	//Calculating total floor area of all buildings attached to the GC
	for (int k = 0; k < GCcompany.c_connectedBuildings.size(); k++ ){
		GCcompany.p_floorSurfaceArea_m2 += GCcompany.c_connectedBuildings.get(k).p_floorSurfaceArea_m2;
		GCcompany.p_roofSurfaceArea_m2 += GCcompany.c_connectedBuildings.get(k).p_roofSurfaceArea_m2;
	}
	
	//Create EA
	if (p_selectedProject == OL_Project.DEWIEKEN){ // Leaving this in for the Wieken for now
		//f_iEACompaniesDeWieken(GCcompany.p_gridConnectionID, GCcompany);
		
		if (GCcompany.p_gridConnectionID.equals("0.0")) {
			f_iEACompanies(GCcompany);
		} 
		else {
			f_iEACompaniesExcel(GCcompany);
		}
		
	}
	else{ // If not de Wieken: create average patterns for companies that have not filled in the survey
		f_iEACompanies(GCcompany);
	}
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[OL_GridConnectionHeatingType]]></ReturnType>
					<Id>1708200794623</Id>
					<Name><![CDATA[f_setHeatingType]]></Name>
					<X>379</X><Y>169</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[heatingTypeInput]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Body><![CDATA[if ( heatingTypeInput.equals("gas")){
	return OL_GridConnectionHeatingType.GASBURNER;
}
else if ( heatingTypeInput.equals("warmtepompLucht")){
	return OL_GridConnectionHeatingType.HEATPUMP_AIR;
}
else if ( heatingTypeInput.equals("warmtepompHybride")){
	return OL_GridConnectionHeatingType.HEATPUMP_GASPEAK;
}
else {
	traceln("no or incorrect heating type detected for building or house in f_setHeatingType");
	return OL_GridConnectionHeatingType.NONE;
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[GIS_Building]]></ReturnType>
					<Id>1708284393045</Id>
					<Name><![CDATA[f_createGISBuilding]]></Name>
					<Description><![CDATA[Creates the GIS object(s) (building(s)) for the companies and houses]]></Description>
					<X>359</X><Y>419</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[row]]></Name>
						<Type><![CDATA[Tuple]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[owner]]></Name>
						<Type><![CDATA[ConnectionOwner]]></Type>
					</Parameter>
					<Body><![CDATA[GIS_Building b = energyModel.add_pop_GIS_Buildings();

b.p_id = row.get( panden.identifica );
b.p_buildingYear = row.get( panden.bouwjaar );	
b.p_status = row.get( panden.status );
b.p_useType = row.get( panden.gebruiksdo );	
b.p_floorSurfaceArea_m2 = row.get( panden.oppervla_1 ); //oppervlakt of area of oppervla_1??
b.p_roofSurfaceArea_m2 = row.get( panden.area ); //oppervlakt of area of oppervla_1?? 
b.p_useType = row.get( panden.gebruiksdo );
b.p_floors = row.get( panden.aantal_ver );
//b.p_buildingType = OL_BuildingType.valueOf(OL_BuildingType, row.get( buildings.type ));
//b.p_householdsInBuilding = row.get( buildings.h_in_b );

// Adres data
b.p_openbareR = row.get(panden.openbare_r); // straat
b.p_huisnummer = row.get(panden.huisnummer);
b.p_huisletter = row.get( panden.huisletter );
b.p_toevoeging = row.get( panden.toevoeging );
b.p_postcode = row.get( panden.postcode );
b.p_woonplaats = row.get( panden.woonplaats );

//position and coordinates
b.p_longitude = row.get( panden.longitude );
b.p_latitude = row.get( panden.latitude );
b.setLatLon(b.p_latitude, b.p_longitude);		
b.p_GISRegion_coords = row.get(panden.wkt_geom);	

//Define name and adress of building + detailed modeling company yes or no
b.p_buildingAdress = row.get(panden.adres) + ", " + row.get(panden.postcode_stad);

//If building is the first building in a cluster (means it has a pancluster_nr), add it to the list of buidling clusters
if(row.get(panden.pandcluster_nr) != null && row.get(panden.pandcluster_nr) > 0) { // && 
	energyModel.c_GISBuildingClusters.add(b);
	b.p_pandcluster_nr = row.get(panden.pandcluster_nr);
}

//Create gisregion
GISRegion gisregion = null;
if( b.p_GISRegion_coords.startsWith( "Multi") ){
	gisregion = zero_Interface.f_createGISObject(f_createGISObjectsTokens(b.p_GISRegion_coords));
	//gisregion = new GISRegion(map,f_createGISObjectsTokens(b.p_GISRegion_coords));
}
else if( b.p_GISRegion_coords.startsWith( "Poly") ){
	gisregion = zero_Interface.f_createGISObject(f_createGISTokensFromPolygon(b.p_GISRegion_coords));
	//gisregion = new GISRegion(map,f_createGISTokensFromPolygon(b.p_GISRegion_coords));
}
else {
	traceln("Building met ID: " + b.p_id + ", heeft GIS coordinaten in de excel data die niet starten met Multi of Poly");
}

b.gisRegion = gisregion;
zero_Interface.c_GISBuildingShapes.add(gisregion);		
owner.c_ownedBuildings.add(b);

return b;]]></Body>
				</Function>
				<Function AccessType="public" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1709806680489</Id>
					<Name><![CDATA[f_addElectricityDemandProfile]]></Name>
					<X>359</X><Y>129</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[parentGC]]></Name>
						<Type><![CDATA[GridConnection]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[yearlyElectricityDemand_kWh]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[hasQuarterlyData]]></Name>
						<Type><![CDATA[boolean]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[profileName]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Body><![CDATA[if ( hasQuarterlyData == true ) { // Add quarterly electricity data pattern if available 
	J_EAProfile profile = new J_EAProfile(parentGC, OL_EnergyCarrierType.ELECTRICITY, null, OL_ProfileAssetType.ELECTRICITYBASELOAD, energyModel.p_timeStep_h);		
	profile.energyAssetName = parentGC.p_ownerID + " custom profile";
	List<Double> quarterlyEnergyDemand_kWh = selectValues(double.class, "SELECT " + profileName + "_demand FROM comp_elec_consumption;");		
	profile.a_energyProfile_kWh = quarterlyEnergyDemand_kWh.stream().mapToDouble(d -> max(0,d)).toArray();
} 

else { // Add regular electricity and consumption profiles
	J_EAConsumption profile = new J_EAConsumption(parentGC, OL_EnergyAssetType.ELECTRICITY_DEMAND, profileName, yearlyElectricityDemand_kWh, 0.0, 0.0, 0.0, 0.0, energyModel.p_timeStep_h);
}
]]></Body>
				</Function>
				<Function AccessType="public" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1709806921656</Id>
					<Name><![CDATA[f_addHeatDemandProfile]]></Name>
					<X>359</X><Y>149</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[parentGC]]></Name>
						<Type><![CDATA[GridConnection]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[yearlyGasDemand_m3]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[hasHourlyGasData]]></Name>
						<Type><![CDATA[boolean]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[ratioGasUsedForHeating]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Body><![CDATA[J_EAConsumption heatDemand;

if (parentGC.p_heatingType != OL_GridConnectionHeatingType.GASBURNER){// FOR NOW CHECK THIS
	return;
}
/*
if(hasHourlyGasData){
	J_EAProfile profile = new J_EAProfile(parentGC, OL_EnergyCarrierType.GAS, null, energyModel.p_timeStep_h);		
	profile.energyAssetName = parentGC.p_ownerID + " custom gas profile";
	
	List<Double> hourlyHeatDemand_kWh = selectValues(double.class, "SELECT " + profileName + "_demand FROM comp_elec_consumption;");		
	profile.a_energyProfile_kWh = quarterlyEnergyDemand_kWh.stream().mapToDouble(d -> max(0,d)).toArray();
	energyModel.c_energyAssets.add(profile);
	parentGC.f_connectToJ_EA(profile);
	 // 
	//AFMAKEN!! ??? GAS PROFIEL IN LADEN EN DAN VERVOLGENS OMZETTEN NAAR HEAT DEMAND CONSUMPTIE PATROON
	ratioGasUsedForHeating*GAS_CONSUMPTION_PER_HOUR --> TO GET ACTUAL GAS USAGE FOR HEATING
}
*/
//else{
	//Generic profile (only needed still for de wieken)
	if( yearlyGasDemand_m3 == 0 && parentGC.p_heatingType == OL_GridConnectionHeatingType.GASBURNER) {
		double yearlyHeatDemandPerFloorSurface_kWhpm2 = (90.9778 * avgc_data.p_gas_kWhpm3)/9.7; // VEEL TE HOOG! DUs gedeelt door 9.7 nu, waarschijnlijke fout met eenheden
		yearlyGasDemand_m3 = parentGC.p_floorSurfaceArea_m2 * yearlyHeatDemandPerFloorSurface_kWhpm2 / 50;
	}
	
	
	//Determine heatdemand
	double yearlyDemandHeat_kWh = yearlyGasDemand_m3 * avgc_data.p_gas_kWhpm3; 
	heatDemand = new J_EAConsumption(parentGC, OL_EnergyAssetType.HEAT_DEMAND, "Building_heat_demand", 0.0, yearlyDemandHeat_kWh, 0.0, 0.0, 0.0, energyModel.p_timeStep_h);
	
//}

switch (parentGC.p_heatingType){ // HOE gaan we om met meerdere heating types in survey???

	case GASBURNER:
		J_EAConversionGasBurner gasBurner = new J_EAConversionGasBurner(parentGC, OL_EnergyAssetType.GAS_BURNER, heatDemand.yearlyDemandHeat_kWh / 8760 * 10, 0.99, energyModel.p_timeStep_h, 90);
		// Waarom hierboven in de JEA een factor /8760 * 10 ?????
	break;
	
	case HYBRID_HEATPUMP:
		traceln("GC HAS HYBRID_HEATPUMP, NO EA MADE");
	break;
	
	case ELECTRIC_HEATPUMP:
		traceln("GC HAS ELECTRIC_HEATPUMP, NO EA MADE");
	break;
	
	/*
	case HYDROGENBURNER:
		traceln("GC HAS HYDROGEN_BURNER, NO EA MADE");
	break;
	*/
	
	default:
	traceln("HEATING TYPE NOT FOUND FOR GC ");
	traceln(parentGC);
}

]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1709889089317</Id>
					<Name><![CDATA[f_createParcels]]></Name>
					<Description><![CDATA[Creates "empty" parcels on the gismap, these parcels do not contain buildings (yet).]]></Description>
					<X>359</X><Y>499</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[List<Tuple> rows = selectFrom(lege_percelen).list();

for (Tuple row : rows) {
	
	GIS_Area area = energyModel.add_pop_GIS_Area();
	area.p_longitude = row.get( lege_percelen.longitude );
	area.p_latitude = row.get( lege_percelen.latitude );
	area.setLatLon(area.p_latitude, area.p_longitude);		
	area.p_GISRegionAreacoords = row.get(lege_percelen.polygon);	
	area.p_areaType = OL_AreaType.PARCEL;
	area.p_areaID = row.get(lege_percelen.id);
	
	//Building + styling the gisregion and putting it on the map	
	GISRegion gisregion = zero_Interface.f_createGISObject(f_createGISObjectsTokens(area.p_GISRegionAreacoords));
	zero_Interface.f_styleParcels(gisregion);
	area.gisRegion = gisregion;
}]]></Body>
				</Function>
				<Function AccessType="public" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1709891985932</Id>
					<Name><![CDATA[f_addEnergyProduction]]></Name>
					<X>359</X><Y>209</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[parentGC]]></Name>
						<Type><![CDATA[GridConnection]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[asset_type]]></Name>
						<Type><![CDATA[OL_EnergyAssetType]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[asset_name]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[installedPower_kW]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Body><![CDATA[//String asset_name					= "Production Asset";
double capacityElectric_kW			= 0;
double capacityHeat_kW				= 0;
double yearlyProductionMethane_kWh 	= 0;
double yearlyProductionHydrogen_kWh = 0;
double timestep_h 					= energyModel.p_timeStep_h;
double outputTemperature_degC 		= 0;


switch (asset_type){

case PHOTOVOLTAIC: 
	//asset_name = "Solar Panels";
	capacityElectric_kW = installedPower_kW;
	parentGC.v_hasPV = true;
	energyModel.v_totalInstalledPVPower_kW += installedPower_kW;
break;

case WINDMILL:
	//asset_name = "Windmill onshore";
	capacityElectric_kW = installedPower_kW;
	energyModel.v_totalInstalledWindPower_kW += installedPower_kW;
break;

case PHOTOTHERMAL:
	//asset_name = "PVT";
	capacityElectric_kW = installedPower_kW*0.5;//??????
	capacityHeat_kW	= installedPower_kW*0.5; // ????????
	outputTemperature_degC = 60; // ??????
break;
}


J_EAProduction production_asset = new J_EAProduction(parentGC, asset_type, asset_name, capacityElectric_kW , capacityHeat_kW, yearlyProductionMethane_kWh, yearlyProductionHydrogen_kWh, timestep_h, outputTemperature_degC);

]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[GIS_Building]]></ReturnType>
					<Id>1710161685966</Id>
					<Name><![CDATA[f_createGISBuildingEA]]></Name>
					<Description><![CDATA[Creates the GIS object (building) for the area EA (windfarms, solarparks, electrolysers, batteries, etc.)]]></Description>
					<X>359</X><Y>439</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[name]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[latitude]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[longitude]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[polygon]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Body><![CDATA[GIS_Building b = energyModel.add_pop_GIS_Buildings();

b.p_id = name;

//position and coordinates
b.p_latitude = latitude;
b.p_longitude = longitude;
b.setLatLon(b.p_latitude, b.p_longitude);		
b.p_GISRegion_coords = polygon;	

//Building + styling the gisregion and putting it on the map	

//Create gisregion
b.gisRegion = zero_Interface.f_createGISObject(f_createGISObjectsTokens(b.p_GISRegion_coords));

zero_Interface.c_GISBuildingShapes.add(b.gisRegion);		

return b;
]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1710772717109</Id>
					<Name><![CDATA[f_addEnergyAssetsToHouses]]></Name>
					<Description><![CDATA[Initialisation of the Energy assets using average values for houses]]></Description>
					<X>139</X><Y>509</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[house]]></Name>
						<Type><![CDATA[GCHouse]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[jaarlijksGasVerbruik]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[jaarlijksElectriciteitsVerbruik]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Body><![CDATA[//Add generic electricity demand profile 
f_addElectricityDemandProfile(house, jaarlijksElectriciteitsVerbruik, false, null);

//Tuinzigt specifiek

if (p_selectedProject == OL_Project.TUINZIGT || p_selectedProject == OL_Project.SCALE ){
	f_addBuildingHeatModel(house, house.p_floorSurfaceArea_m2, C);
	
	//temporary hardcode household gasburner initialisatie (should be seperate function).
	house.p_heatingType = OL_GridConnectionHeatingType.GASBURNER;
	J_EAConversionGasBurner gasBurner = new J_EAConversionGasBurner(house, OL_EnergyAssetType.GAS_BURNER, 30, 0.99, energyModel.p_timeStep_h, 90);
}
else{
	f_addHeatDemandProfile(house, jaarlijksGasVerbruik, false, 1);
}

if( randomTrue (avgc_data.p_ratioHouseInstalledPV)){
	double installedRooftopSolar_kW = Double.valueOf( uniform_discr(3,6));
	f_addEnergyProduction(house, OL_EnergyAssetType.PHOTOVOLTAIC, "Residential Solar", installedRooftopSolar_kW );
}

if (randomTrue( 0.05)){
	f_addElectricVehicle(house, OL_EnergyAssetType.ELECTRIC_VEHICLE, true, 0, 0);
}
else{
	f_addDieselVehicle(house, OL_EnergyAssetType.DIESEL_VEHICLE, true, 0);
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1710951300113</Id>
					<Name><![CDATA[f_createSurveyCompanies]]></Name>
					<X>119.001</X><Y>349</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[traceln("Companies that filled in the survey:");

//Get the survey data
List<com.zenmo.orm.companysurvey.dto.Survey> surveys = f_getSurveys();

for (var survey : surveys) {
	 
	ConnectionOwner survey_owner = findFirst(energyModel.pop_connectionOwners, p -> p.p_actorID.equals(survey.getCompanyName()) );
	
	if (survey_owner == null){ // Safety Check, if no owner is found, survey should be checked and if alright: added to the 'bedrijven' db (excel).
	 	traceln("NO OWNER FOUND FOR SURVEY FILLED IN BY: " + survey.getCompanyName());
	 	continue;
 	}
 	
 	survey_owner.p_detailedCompany = "ja";
 	c_surveyCompanies.add(survey.getCompanyName());
	traceln(survey.getCompanyName());
	
	
	for (var address : survey.getAddresses()) {
        for (var gridConnection: address.getGridConnections()) {
	 		
		 	//Check if it has direct connection with the grid, if not: create subtenant		 	
		 	if (!gridConnection.getElectricity().getHasConnection() && !gridConnection.getNaturalGas().getHasConnection()){
				f_createSubtenant(survey, address);	
			 	continue;
		 	}
		 	
		 	
		 	//Create GC
		 	GCUtility companyGC = energyModel.add_UtilityConnections();		  
		 	
			//Set parameters for the Grid Connection
			companyGC.p_ownerID = survey.getCompanyName();
		 	//companyGC.p_gridConnectionID = gridConnection.get().toString();
		 	companyGC.p_gridConnectionID = gridConnection.getSequence().toString()+ ".0";

			//Adress data
			companyGC.p_openbareR = address.getStreet();
		 	companyGC.p_huisnummer = String.valueOf(address.getHouseNumber()); 
		 	companyGC.p_huisletter = address.getStreet();
		 	companyGC.p_toevoeging = address.getHouseNumberSuffix();
		 	companyGC.p_postcode = address.getPostalCode();
		 	companyGC.p_woonplaats = address.getCity();
			 
		 	//Find actor and connect GC 
			companyGC.p_owner = survey_owner;// findFirst(energyModel.pop_connectionOwners, p -> p.p_actorID.equals(companyGC.p_ownerID) );		 	
		 	
		 	//Find buildings, and connect 
		 	double totalFloorSurfaceAreaGC_m2 = 0;
		 	double totalRoofSurfaceAreaGC_m2 = 0;
		 	List<Tuple> rows = selectFrom(panden).where(panden.detail_id.eq(companyGC.p_gridConnectionID)).list();// Use this when grid connections have own unique identifier in surveys
			for (Tuple row : rows) {
				GIS_Building b = f_createGISBuilding( row, survey_owner);				
				companyGC.c_connectedBuildings.add(b);
				companyGC.p_owner.c_ownedBuildings.add(b);
				totalFloorSurfaceAreaGC_m2 += b.p_floorSurfaceArea_m2;
				totalRoofSurfaceAreaGC_m2 += b.p_roofSurfaceArea_m2;
				b.c_gridConnectionsInBuilding.add(companyGC);
				b.p_trafoID = row.get(panden.trafo_id);
				zero_Interface.f_styleBuildings(b);
				
			}      
			
			
			//Add (combined) building data to GC (latitude and longitude + area)
			companyGC.p_floorSurfaceArea_m2 = totalFloorSurfaceAreaGC_m2;
			companyGC.p_roofSurfaceArea_m2 = totalRoofSurfaceAreaGC_m2;
			companyGC.p_longitude = companyGC.c_connectedBuildings.get(0).p_longitude; // Get longitude of first building (only used to get nearest trafo)
			companyGC.p_latitude = companyGC.c_connectedBuildings.get(0).p_latitude; // Get latitude of first building (only used to get nearest trafo)
			companyGC.setLatLon(companyGC.p_latitude, companyGC.p_longitude);  
			
			
			
			//Calculate remaining floor surface area for the unknown company calculations
			v_remainingFloorArea_m2 -= totalFloorSurfaceAreaGC_m2;
			 
			
			//Connect GC to grid node
			companyGC.p_parentNodeElectricID = companyGC.c_connectedBuildings.get(0).p_trafoID;
			
			
			/*
			MOVED TO INITIALISER OF ENERGYMODEL 
			//If GC has no assigned trafo_id --> Assign to nearest trafo
			if (companyGC.p_parentNodeElectricID == null){
				//Set nearest agent as trafo
				GridNode nearestLVStation = companyGC.getNearestAgent(energyModel.f_getGridNodesNotTopLevel());
				if (nearestLVStation != null) {
					nearestLVStation.f_getConnectedGridConnections().add(companyGC);
					companyGC.p_parentNodeElectricID = nearestLVStation.p_gridNodeID;
				}
			}	
			*/
			
			//Energy asset initialization
			f_iEASurveyCompanies(companyGC, gridConnection); 
			
        }
    }
}
]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1710951482553</Id>
					<Name><![CDATA[f_createConnectionOwners]]></Name>
					<X>119</X><Y>209</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[List<Tuple> rows = selectFrom(bedrijven).where(bedrijven.extra_info.eq("-")).list();

for (Tuple row : rows) {
	ConnectionOwner COC = energyModel.add_pop_connectionOwners(); // Create Connection owner company
	COC.p_actorID = row.get(bedrijven.bedrijf);
	c_connectionOwnerNames.add(COC.p_actorID);
	COC.p_actorType = OL_ActorType.CONNECTIONOWNER;
	COC.p_connectionOwnerType = OL_ConnectionOwnerType.COMPANY;
	COC.p_detailedCompany = row.get(bedrijven.detail_model);
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[List<com.zenmo.orm.companysurvey.dto.Survey>]]></ReturnType>
					<Id>1710952074568</Id>
					<Name><![CDATA[f_getSurveys]]></Name>
					<X>139</X><Y>369</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[//Connect with database
var db = com.zenmo.orm.ConnectKt.connectToPostgres("jdbc:postgresql://holon-webapp-database.postgres.database.azure.com:5432/zero_prod", System.getenv("HESSENPOORT_DB_USER"), System.getenv("HESSENPOORT_DB_PASSWORD"));

var repo = new com.zenmo.orm.companysurvey.SurveyRepository(db);
List<com.zenmo.orm.companysurvey.dto.Survey> surveys = new ArrayList();

if (p_selectedProject == OL_Project.HESSENPOORT){ //Hessenpoort surveys
	surveys = repo.getHessenpoortSurveys();
}
else { //(p_selectedProject == DEWIEKEN){ // De Wieken surveys
	//surveys = repo.getDeWiekenSurveys(); // Koppeling voor de wieken bestaat nog niet, moet nog door Erik gemaakt worden.

}

//((org.postgresql.jdbc.PgConnection)db).connector().getConnection().close();

var connection = (org.postgresql.jdbc.PgConnection) db.getConnector().invoke().getConnection();

try {
    // Code that might throw
    // an exception.
    connection.close();
} catch (Exception e) {
    // Handle it.
    traceln("Connection not closed!");
}


return surveys;]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1711118858178</Id>
					<Name><![CDATA[f_createActors]]></Name>
					<X>99</X><Y>169</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[//Create specific actors like Grid operator, energy supplier, energy coop
f_createEnergyActors();

//Create predefined connection owners
f_createConnectionOwners();

//Create predefined subtenants (can probably be removed after Hessenpoort?)
f_createPredefinedSubtenant();]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1711119261984</Id>
					<Name><![CDATA[f_createPredefinedSubtenant]]></Name>
					<X>119</X><Y>229</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1711388622301</Id>
					<Name><![CDATA[f_iEASurveyCompanies]]></Name>
					<X>139</X><Y>409</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[companyGC]]></Name>
						<Type><![CDATA[GridConnection]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[gridConnection]]></Name>
						<Type><![CDATA[com.zenmo.orm.companysurvey.dto.GridConnection]]></Type>
					</Parameter>
					<Body><![CDATA[//Initialize boolean that sets the creation of currently existing electric (demand) EA
boolean createElectricEA = true;


//Create current scenario parameter list
J_scenario_Current current_scenario_list = new J_scenario_Current();
zero_Interface.c_scenarioMap_Current.put(companyGC, current_scenario_list);

//Create future scenario parameter list
J_scenario_Future future_scenario_list = new J_scenario_Future();
zero_Interface.c_scenarioMap_Future.put(companyGC, future_scenario_list);




////Electricity (consumption)
if (gridConnection.getElectricity().getHasConnection()){
	
	if (gridConnection.getElectricity().getContractedConnectionCapacityKw() == null) {
		traceln("SURVEYOWNER HAS NOT FILLED IN CONNECTION CAPACITY!!! AVG value taken");
		
		companyGC.p_connectionCapacity_kW = avgc_data.p_avgUtilityConnectionCapacity_kW;
	}
	else{
	companyGC.p_connectionCapacity_kW = gridConnection.getElectricity().getContractedConnectionCapacityKw(); //Contracted connection capacity
	}
			
	//if (gridConnection.getElectricity().getGrootverbruik()){ // If groot verbruiker, get physical capacity and supply capacity
	//		companyGC.p_physicalCapacity_kW = gridConnection.getElectricity().getGrootverbruik().getPhysicalCapacityKw();
	//		companyGC.p_supplyContractualCapacity_kW = gridConnection.getElectricity().getGrootverbruik().getContractedConnectionSupplyCapacityKw();
	//}

	double yearlyElectricityConsumption_kWh = (gridConnection.getElectricity().getAnnualElectricityDemandKwh() != null) ? gridConnection.getElectricity().getAnnualElectricityDemandKwh() : 0; // Yearly electricity consumption (0 if value is null)
	boolean hasQuarterHourlyValues = false; // Basic setting
	String profileName = "Office_other_electricity";

	//Check if quarter hourly values are available 
	if (selectFirstValue(Double.class, "SELECT " + "ccid" + gridConnection.getSequence().toString() + "_demand FROM comp_elec_consumption LIMIT 1;") != null){
		hasQuarterHourlyValues = true;
		profileName = "ccid" + gridConnection.getSequence().toString();
		//input boolean: Dont create current electric energy assets if electricity profile is present.
		if (!v_createCurrentElectricityEA){
			createElectricEA = false;
		}
	}
	
	//Add base electricity demand profile (with profile if available, with generic pattern if only yearly data is available)
	f_addElectricityDemandProfile(companyGC, yearlyElectricityConsumption_kWh, hasQuarterHourlyValues, profileName);
		
	//Update total Yearly electricity consumption
	v_remainingElectricityConsumption_kWh -= yearlyElectricityConsumption_kWh;
}

//Grid expansion request
if (gridConnection.getElectricity().getGridExpansion().getHasRequestAtGridOperator()){
	future_scenario_list.setRequestedConnectionCapacity_kW((gridConnection.getElectricity().getGridExpansion().getRequestedKW() != null) ? gridConnection.getElectricity().getGridExpansion().getRequestedKW() : 0 + companyGC.p_connectionCapacity_kW);
}




////Supply (pv, wind, etc.)
if (gridConnection.getSupply().getHasSupply()){
	//gridConnection.getElectricity().getAnnualElectricityProductionKwh() // Staat niet meer in het formulier!
	
	//PV
	if (gridConnection.getSupply().getPvInstalledKwp() != null && gridConnection.getSupply().getPvInstalledKwp() > 0){
		
		gridConnection.getSupply().getPvOrientation(); // Wat doen we hier mee?????
		
		f_addEnergyProduction(companyGC, OL_EnergyAssetType.PHOTOVOLTAIC, "Rooftop Solar", gridConnection.getSupply().getPvInstalledKwp());
		
		//add to scenario: current
		current_scenario_list.setCurrentPV_kW(gridConnection.getSupply().getPvInstalledKwp());
		//current_scenario_list.currentPV_orient = gridConnection.getSupply().getPvOrientation();
	}
	
	//Wind
	if (gridConnection.getSupply().getWindInstalledKw() != null && gridConnection.getSupply().getWindInstalledKw() > 0){
		f_addEnergyProduction(companyGC, OL_EnergyAssetType.WINDMILL, "Wind mill", gridConnection.getSupply().getWindInstalledKw());

		//add to scenario: current
		current_scenario_list.setCurrentWind_kW(gridConnection.getSupply().getWindInstalledKw());
	}
}

//Planned supply (PV)
if (gridConnection.getSupply().getPvPlanned() != null && gridConnection.getSupply().getPvPlanned()){ 
	future_scenario_list.setPlannedPV_kW(gridConnection.getSupply().getPvPlannedKwp()); 
	future_scenario_list.setPlannedPV_year(gridConnection.getSupply().getPvPlannedYear());
	//gridConnection.getSupply().getPvPlannedOrientation();
}

//Planned supply (Wind)
if (gridConnection.getSupply().getWindPlannedKw() != null && gridConnection.getSupply().getWindPlannedKw() > 0){
	future_scenario_list.setPlannedWind_kW(gridConnection.getSupply().getWindPlannedKw());
	// plannedWind_year // ???
}




////Gas
//Initialize variables (outside of gas loop needed for heating)
boolean hasHourlyGasData = false;
double yearlyGasConsumption_m3 = 0;
double ratioGasUsedForHeating = 1;
 
if (gridConnection.getNaturalGas().getHasConnection()){
	
	yearlyGasConsumption_m3 = (gridConnection.getNaturalGas().getAnnualDemandM3() != null) ? gridConnection.getNaturalGas().getAnnualDemandM3() : 0; // Yearly electricity consumption (0 if value is null)

	//Check if quarter hourly values are available 
	if (selectFirstValue(Double.class, "SELECT " + "ccid" + gridConnection.getSequence().toString() + "_demand FROM comp_gas_consumption LIMIT 1;") != null){
		hasHourlyGasData = true;
	}
	
	//Determine how much gas goes towards heating
	ratioGasUsedForHeating = (gridConnection.getNaturalGas().getPercentageUsedForHeating() != null) ? gridConnection.getNaturalGas().getPercentageUsedForHeating() : 1;

	//Update total Yearly gas consumption
	v_remainingGasConsumption_m3 -= yearlyGasConsumption_m3;
}



	
////Heating
//Determine the current heating type
f_setHeatingTypeSurvey(companyGC, gridConnection);

//Set the heating demand profile
f_addHeatDemandProfile(companyGC, yearlyGasConsumption_m3, hasHourlyGasData, ratioGasUsedForHeating);

//add to scenario: current
current_scenario_list.setCurrentHeatingType(companyGC.p_heatingType);




////Storage
Float battery_power_kW = 0f;
Float battery_capacity_kWh = 0f;

if (gridConnection.getStorage().getHasBattery() && createElectricEA){ // Check if battery present and if electric demand EA should be created
	if (gridConnection.getStorage().getBatteryPowerKw() != null){
		battery_power_kW = gridConnection.getStorage().getBatteryPowerKw();
	}
	if (gridConnection.getStorage().getBatteryCapacityKwh() != null){
		battery_capacity_kWh = gridConnection.getStorage().getBatteryCapacityKwh();	
	}
}
// Elke survey company krijgt hoe dan ook een batterij EA (ook als op dit moment nog geen batterij aanwezig is, maar dan is capaciteit gewoon 0)
f_addStorage(companyGC, battery_power_kW, battery_capacity_kWh, OL_EnergyAssetType.STORAGE_ELECTRIC);


//Aansturing toevoegen ?

//add to scenario: current
current_scenario_list.setCurrentBatteryPower_kW(battery_power_kW);
current_scenario_list.setCurrentBatteryCapacity_kWh(battery_capacity_kWh);
	
	
if (gridConnection.getStorage().getHasThermalStorage()){ // Check for thermal storage
	//gridConnection.getStorage().getThermalStorageKw()
	//J_EAStorageHeat(Agent parentAgent, OL_EAStorageTypes heatStorageType, double capacityHeat_kW, double lossFactor_WpK, double timestep_h, double initialTemperature_degC, double minTemperature_degC, double maxTemperature_degC, double setTemperature_degC, double heatCapacity_JpK, String ambientTempType ) {
	//J_EAStorageHeat(companyGC, OL_EAStorageTypes heatStorageType, double capacityHeat_kW, double lossFactor_WpK, double timestep_h, double initialTemperature_degC, double minTemperature_degC, double maxTemperature_degC, double setTemperature_degC, double heatCapacity_JpK, String ambientTempType ) {
	//Denk ook aan aansturing?!!
}

if (gridConnection.getStorage().getHasPlannedBattery()){ // Check for planned battery
	future_scenario_list.setPlannedBatteryCapacity_kWh(gridConnection.getStorage().getPlannedBatteryCapacityKwh());
	future_scenario_list.setPlannedBatteryPower_kW(gridConnection.getStorage().getPlannedBatteryPowerKw());
}




////Transport

//Cars of comuters and visitors 
int nbDailyCarVisitors_notNull = (gridConnection.getTransport().getNumDailyCarVisitors() != null) ? gridConnection.getTransport().getNumDailyCarVisitors() : 0;
int nbDailyCarCommuters_notNull = (gridConnection.getTransport().getNumDailyCarAndVanCommuters() != null) ? gridConnection.getTransport().getNumDailyCarAndVanCommuters() : 0;

if (nbDailyCarCommuters_notNull + nbDailyCarVisitors_notNull > 0){	
	
	int nbEVCarsComute = (gridConnection.getTransport().getNumCommuterAndVisitorChargePoints() != null) ? gridConnection.getTransport().getNumCommuterAndVisitorChargePoints() : 0; // Wat doen we hier mee????
	int nbDieselCarsComute = gridConnection.getTransport().getNumDailyCarAndVanCommuters() + gridConnection.getTransport().getNumDailyCarVisitors() - nbEVCarsComute;

	boolean isDefaultVehicle = true;

	for (int i = 0; i< nbDieselCarsComute; i++){
		f_addDieselVehicle(companyGC, OL_EnergyAssetType.DIESEL_VEHICLE, isDefaultVehicle, 0);
	}
	
	if (createElectricEA){ // Check if electric demand EA should be created
		for (int j = 0; j< nbEVCarsComute; j++){
			f_addElectricVehicle(companyGC, OL_EnergyAssetType.ELECTRIC_VEHICLE, isDefaultVehicle, 0, 0);
		}
	}
	
	//add to scenario: current
	current_scenario_list.setCurrentEVCars(nbEVCarsComute);
	current_scenario_list.setCurrentDieselCars(nbDieselCarsComute);
}


//Business vehicles
if (gridConnection.getTransport().getHasVehicles()){

	//Cars
	if (gridConnection.getTransport().getCars().getNumCars() != null && gridConnection.getTransport().getCars().getNumCars() != 0){
		
		//gridConnection.getTransport().getCars().getNumChargePoints(); // Wat doen we hier mee????????
		
		int nbEVCars = gridConnection.getTransport().getCars().getNumElectricCars();
		int nbDieselCars = gridConnection.getTransport().getCars().getNumCars() - nbEVCars;

		
		boolean isDefaultVehicle		= false;
		double annualTravelDistance_km 	= gridConnection.getTransport().getCars().getAnnualTravelDistancePerCarKm();
		double maxChargingPower_kW 		= gridConnection.getTransport().getCars().getPowerPerChargePointKw();		
		
		for (int i = 0; i< nbDieselCars; i++){
		f_addDieselVehicle(companyGC, OL_EnergyAssetType.DIESEL_VEHICLE, isDefaultVehicle, annualTravelDistance_km);
		}
		
		if (createElectricEA){ // Check if electric demand EA should be created
			for (int j = 0; j< nbEVCars; j++){
			f_addElectricVehicle(companyGC, OL_EnergyAssetType.ELECTRIC_VEHICLE, isDefaultVehicle, annualTravelDistance_km, maxChargingPower_kW);
			}
		}
		
		//add to scenario: current
		current_scenario_list.setCurrentEVCars(((current_scenario_list.getCurrentEVCars() != null) ? current_scenario_list.getCurrentEVCars() : 0) + nbEVCars);
		current_scenario_list.setCurrentDieselCars(((current_scenario_list.getCurrentDieselCars() != null) ? current_scenario_list.getCurrentDieselCars() : 0) + nbDieselCars);

		//Planned
		future_scenario_list.setPlannedEVCars((gridConnection.getTransport().getCars().getNumPlannedElectricCars() != null) ? gridConnection.getTransport().getCars().getNumPlannedElectricCars() : 0);
		future_scenario_list.setPlannedHydrogenCars((gridConnection.getTransport().getCars().getNumPlannedHydrogenCars() != null) ? gridConnection.getTransport().getCars().getNumPlannedHydrogenCars() : 0);
		
	}
	
	
	//Vans
	if (gridConnection.getTransport().getVans().getNumVans() != null && gridConnection.getTransport().getVans().getNumVans() != 0){
		
		//Update v_remaningAmount of vans
		v_remainingAmountOfVans -= gridConnection.getTransport().getVans().getNumVans();
		
		
		gridConnection.getTransport().getVans().getNumChargePoints(); // Wat doen we hier mee????????
		
		int nbEVVans = gridConnection.getTransport().getVans().getNumElectricVans();		
		int nbDieselVans = gridConnection.getTransport().getVans().getNumVans() - nbEVVans;

		boolean isDefaultVehicle		= true;
		double annualTravelDistance_km 	= 0;
		double maxChargingPower_kW 		= avgc_data.p_avgEVMaxChargePowerVan_kW;		
		
		
		if (gridConnection.getTransport().getVans().getAnnualTravelDistancePerVanKm() != null){		// Moeten null checks op het formulier komen!!!!
		annualTravelDistance_km 	= gridConnection.getTransport().getVans().getAnnualTravelDistancePerVanKm();
		isDefaultVehicle			= false;
		}
		if (gridConnection.getTransport().getVans().getPowerPerChargePointKw() != null){
		maxChargingPower_kW 		= gridConnection.getTransport().getVans().getPowerPerChargePointKw();	
		isDefaultVehicle			= false;		
		}
		
		
		for (int i = 0; i< nbDieselVans; i++){
		f_addDieselVehicle(companyGC, OL_EnergyAssetType.DIESEL_VAN, isDefaultVehicle, annualTravelDistance_km);
		}
		
		if (createElectricEA){ // Check if electric demand EA should be created
			for (int j = 0; j< nbEVVans; j++){
			f_addElectricVehicle(companyGC, OL_EnergyAssetType.ELECTRIC_VAN, isDefaultVehicle, annualTravelDistance_km, maxChargingPower_kW);
			}
		}
		
		//add to scenario: current
		current_scenario_list.setCurrentEVVans(nbEVVans);
		current_scenario_list.setCurrentDieselVans(nbDieselVans);
		
		//Planned
		future_scenario_list.setPlannedEVVans((gridConnection.getTransport().getVans().getNumPlannedElectricVans() != null) ? gridConnection.getTransport().getVans().getNumPlannedElectricVans() : 0);
		future_scenario_list.setPlannedHydrogenVans((gridConnection.getTransport().getVans().getNumPlannedHydrogenVans() != null) ? gridConnection.getTransport().getVans().getNumPlannedHydrogenVans() : 0);
	}
	
		
	
	//Trucks
	if (gridConnection.getTransport().getTrucks().getNumTrucks() != null && gridConnection.getTransport().getTrucks().getNumTrucks() != 0){
		
		//Update v_remaningAmount of trucks
		v_remainingAmountOfTrucks -= gridConnection.getTransport().getTrucks().getNumTrucks();


		gridConnection.getTransport().getTrucks().getNumChargePoints(); // Wat doen we hier mee????????
		
		
		int nbEVTrucks = gridConnection.getTransport().getTrucks().getNumElectricTrucks();		
		int nbDieselTrucks = gridConnection.getTransport().getTrucks().getNumTrucks() - nbEVTrucks;
	
		boolean isDefaultVehicle		= true;
		double annualTravelDistance_km = 0;
		double maxChargingPower_kW = avgc_data.p_avgEVMaxChargePowerTruck_kW;
		
		
		if (gridConnection.getTransport().getTrucks().getAnnualTravelDistancePerTruckKm() != null){		// Moeten null checks op het formulier komen!!!!
		annualTravelDistance_km 	= gridConnection.getTransport().getTrucks().getAnnualTravelDistancePerTruckKm();
		isDefaultVehicle			= false;
		}
		if (gridConnection.getTransport().getTrucks().getPowerPerChargePointKw() != null){
		maxChargingPower_kW 		= gridConnection.getTransport().getTrucks().getPowerPerChargePointKw();
		isDefaultVehicle			= false;		
		}
		
		
		for (int i = 0; i< nbDieselTrucks; i++){
		f_addDieselVehicle(companyGC, OL_EnergyAssetType.DIESEL_TRUCK, isDefaultVehicle, annualTravelDistance_km);
		}
		
		if (createElectricEA){ // Check if electric demand EA should be created
			for (int j = 0; j< nbEVTrucks; j++){
			f_addElectricVehicle(companyGC, OL_EnergyAssetType.ELECTRIC_TRUCK, isDefaultVehicle, annualTravelDistance_km, maxChargingPower_kW);
			}
		}
		
		//add to scenario: current
		current_scenario_list.setCurrentEVTrucks(nbEVTrucks);
		current_scenario_list.setCurrentDieselTrucks(nbDieselTrucks);
	
		//Planned
		future_scenario_list.setPlannedEVTrucks((gridConnection.getTransport().getTrucks().getNumPlannedElectricTrucks() != null) ? gridConnection.getTransport().getTrucks().getNumPlannedElectricTrucks() : 0);
		future_scenario_list.setPlannedHydrogenTrucks((gridConnection.getTransport().getTrucks().getNumPlannedHydrogenTrucks() != null) ? gridConnection.getTransport().getTrucks().getNumPlannedHydrogenTrucks() : 0);
	}
	
	
	//Other
	if (Objects.nonNull(gridConnection.getTransport().getOtherVehicles().getHasOtherVehicles())){
	
	// Wat doen we hier mee???
	
	}
}
]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1711395274457</Id>
					<Name><![CDATA[f_setHeatingTypeSurvey]]></Name>
					<X>379</X><Y>189</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[companyGC]]></Name>
						<Type><![CDATA[GridConnection]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[gridConnection]]></Name>
						<Type><![CDATA[com.zenmo.orm.companysurvey.dto.GridConnection]]></Type>
					</Parameter>
					<Body><![CDATA[int i = 0;

while (i < gridConnection.getHeat().getHeatingTypes().size()){

	var Heating_Type = gridConnection.getHeat().getHeatingTypes().get(i);
	
	//Heating type Mixed toevoegen! Dus geen collection
	switch (Heating_Type){
		
		case GAS_BOILER:
		companyGC.p_heatingType = OL_GridConnectionHeatingType.GASBURNER;
		companyGC.c_heatingTypes.add(OL_GridConnectionHeatingType.GASBURNER);
		break;

		case HYBRID_HEATPUMP:
		companyGC.p_heatingType = OL_GridConnectionHeatingType.HYBRID_HEATPUMP;
		companyGC.c_heatingTypes.add(OL_GridConnectionHeatingType.HYBRID_HEATPUMP);
		break;

		case ELECTRIC_HEATPUMP:
		companyGC.p_heatingType = OL_GridConnectionHeatingType.ELECTRIC_HEATPUMP;
		companyGC.c_heatingTypes.add(OL_GridConnectionHeatingType.ELECTRIC_HEATPUMP);
		break;
		
		case DISTRICT_HEATING:
		companyGC.p_heatingType = OL_GridConnectionHeatingType.DISTRICTHEAT;
		companyGC.c_heatingTypes.add(OL_GridConnectionHeatingType.DISTRICTHEAT);
		break;
		
		case OTHER:
		companyGC.p_heatingType = OL_GridConnectionHeatingType.NONE;
		companyGC.c_heatingTypes.add(OL_GridConnectionHeatingType.OTHER);
		break;
		
		default:
		traceln("no or incorrect heating type detected for building or house in f_setHeatingTypeSurvey");
		//companyGC.c_heatingTypes.add(OL_GridConnectionHeatingType.NONE);
	}
	i++;
}

//Set correct primary heating method (p_heatingType) (needed for now, till model can support multiple heating types)
if (companyGC.c_heatingTypes.size()>1){
	if (companyGC.c_heatingTypes.contains(OL_GridConnectionHeatingType.ELECTRIC_HEATPUMP)){
		companyGC.p_heatingType = OL_GridConnectionHeatingType.ELECTRIC_HEATPUMP;
		return;
	}
	else if(companyGC.c_heatingTypes.contains(OL_GridConnectionHeatingType.HYBRID_HEATPUMP)){
		companyGC.p_heatingType = OL_GridConnectionHeatingType.HYBRID_HEATPUMP;
		return;
	}
	else if(companyGC.c_heatingTypes.contains(OL_GridConnectionHeatingType.GASBURNER)){
		companyGC.p_heatingType = OL_GridConnectionHeatingType.GASBURNER;
		return;
	}
}



/*
//If multiple heating types: Set heating type mixed
if (companyGC.c_heatingTypes.size()>1 && !companyGC.c_heatingTypes.contains(OL_GridConnectionHeatingType.OTHER)|| companyGC.c_heatingTypes.size()>2){
	traceln("Has multiple heating types (excluding OTHER)");
	traceln(companyGC.c_heatingTypes);
	//Set heating type mixed
	companyGC.p_heatingType = OL_GridConnectionHeatingType.MIXED;
}
*/]]></Body>
				</Function>
				<Function AccessType="public" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1711464510759</Id>
					<Name><![CDATA[f_addElectricVehicle]]></Name>
					<X>359</X><Y>229</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[parentGC]]></Name>
						<Type><![CDATA[GridConnection]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[vehicle_type]]></Name>
						<Type><![CDATA[OL_EnergyAssetType]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[isDefaultVehicle]]></Name>
						<Type><![CDATA[boolean]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[annualTravelDistance_km]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[maxChargingPower_kW]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Body><![CDATA[double storageCapacity_kWh 		= 0;
double energyConsumption_kWhpkm = 0;
double capacityElectricity_kW 	= 0;
double stateOfCharge_r  		= 1; // Initial state of charge
double timestep_h				= energyModel.p_timeStep_h;
double vehicleScaling 			= 1.0;

switch(vehicle_type){
	
	/*
	case ELECTRIC_VEHICLE_COMUTERS: // ??? Hoe laad je andere laadprofielen in.?? Deze moet ander laadprofiel dan de Standaard Electric_vehicle 
	
	capacityElectricity_kW	= avgc_data.p_avgEVMaxChargePowerCar_kW;
	storageCapacity_kWh		= avgc_data.p_avgEVStorageCar_kWh;
	energyConsumption_kWhpkm = avgc_data.p_avgEVEnergyConsumptionCar_kWhpkm;

	break;
	*/
	
	case ELECTRIC_VEHICLE:
	
	capacityElectricity_kW	= avgc_data.p_avgEVMaxChargePowerCar_kW;
	storageCapacity_kWh		= avgc_data.p_avgEVStorageCar_kWh;
	energyConsumption_kWhpkm = avgc_data.p_avgEVEnergyConsumptionCar_kWhpkm;
	
	break;
	
	case ELECTRIC_VAN:
	
	capacityElectricity_kW 	= avgc_data.p_avgEVMaxChargePowerVan_kW;
	storageCapacity_kWh		= avgc_data.p_avgEVStorageVan_kWh;
	energyConsumption_kWhpkm = avgc_data.p_avgEVEnergyConsumptionVan_kWhpkm;
	
	break;
	
	case ELECTRIC_TRUCK:
	
	capacityElectricity_kW	= avgc_data.p_avgEVMaxChargePowerTruck_kW;
	storageCapacity_kWh		= avgc_data.p_avgEVStorageTruck_kWh;
	energyConsumption_kWhpkm = avgc_data.p_avgEVEnergyConsumptionTruck_kWhpkm;
	
	break;
	
}

if (isDefaultVehicle == false){
capacityElectricity_kW	= maxChargingPower_kW;
double yearlyTravelDistance_km = annualTravelDistance_km; // Wat doen we hier mee??
}



//Create the EV vehicle energy asset with the set parameters + links
J_EAEV electricVehicle = new J_EAEV(parentGC, capacityElectricity_kW, storageCapacity_kWh, stateOfCharge_r, timestep_h, energyConsumption_kWhpkm, vehicleScaling, vehicle_type, null);	

]]></Body>
				</Function>
				<Function AccessType="public" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1711534458115</Id>
					<Name><![CDATA[f_addDieselVehicle]]></Name>
					<X>359</X><Y>249</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[parentGC]]></Name>
						<Type><![CDATA[GridConnection]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[vehicle_type]]></Name>
						<Type><![CDATA[OL_EnergyAssetType]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[isDefaultVehicle]]></Name>
						<Type><![CDATA[Boolean]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[annualTravelDistance_km]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Body><![CDATA[double energyConsumption_kWhpkm = 0;
double vehicleScaling = 1.0;

//Diesel car
switch (vehicle_type){
	
	case DIESEL_VEHICLE:
		energyConsumption_kWhpkm = avgc_data.p_avgDieselConsumptionCar_kWhpkm;
	break;
	
	case DIESEL_VAN:
		energyConsumption_kWhpkm = avgc_data.p_avgDieselConsumptionVan_kWhpkm;
	break;
	
	case DIESEL_TRUCK:
		energyConsumption_kWhpkm = avgc_data.p_avgDieselConsumptionTruck_kWhpkm;
	break;
}


if (isDefaultVehicle == false){
	double yearlyTravelDistance_km = annualTravelDistance_km; // ??? Wat doen we hier mee
}

//Create EA and connect to parentGC
J_EADieselVehicle dieselVehicle = new J_EADieselVehicle(parentGC, energyConsumption_kWhpkm, energyModel.p_timeStep_h, vehicleScaling, vehicle_type, null);
]]></Body>
				</Function>
				<Function AccessType="public" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1711627469012</Id>
					<Name><![CDATA[f_addStorage]]></Name>
					<X>360</X><Y>290</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[parentGC]]></Name>
						<Type><![CDATA[GridConnection]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[storagePower_kw]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[storageCapacity_kWh]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[storageType]]></Name>
						<Type><![CDATA[OL_EnergyAssetType]]></Type>
					</Parameter>
					<Body><![CDATA[J_EAStorage storage = null;

switch (storageType){

	case STORAGE_ELECTRIC:
	
		storage = new J_EAStorageElectric(parentGC, storagePower_kw, storageCapacity_kWh, 0, energyModel.p_timeStep_h);
		
	break;
	
	case STORAGE_HEAT:
	
	break;
	
	case STORAGE_GAS:
	
	break;
	
	default:
	
	return;
}
]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1711721083627</Id>
					<Name><![CDATA[f_iEACompanies]]></Name>
					<Description><![CDATA[Initialisation of the Energy assets using average values for companies that have not filled in the survey (yet) combined with totals (floor surface, electricity/yr, gas/yr and trucks)  of the simulated area.]]></Description>
					<X>139</X><Y>469</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[companyGC]]></Name>
						<Type><![CDATA[GridConnection]]></Type>
					</Parameter>
					<Body><![CDATA[//Create current & future scenario parameter list
J_scenario_Current current_scenario_list = new J_scenario_Current();
zero_Interface.c_scenarioMap_Current.put(companyGC, current_scenario_list);

J_scenario_Future future_scenario_list = new J_scenario_Future();
zero_Interface.c_scenarioMap_Future.put(companyGC, future_scenario_list);

//Basic heating and electricity demand profiles
if (companyGC.p_floorSurfaceArea_m2 > 0){

	//Buidling Base electricity load
	double Remaining_electricity_demand_kWh_p_m2_yr = v_remainingElectricityConsumption_kWh / v_remainingFloorArea_m2;
	double yearlyElectricityDemand_kWh = Remaining_electricity_demand_kWh_p_m2_yr * companyGC.p_floorSurfaceArea_m2;
	//traceln(companyGC.p_ownerID + Remaining_electricity_demand_kWh_p_m2_yr);
	
	f_addElectricityDemandProfile(companyGC, yearlyElectricityDemand_kWh, false, "Office_other_electricity");


	//Building Gas demand profile (purely heating)
	double Remaining_gas_demand_m3_p_m2_yr = v_remainingGasConsumption_m3/v_remainingFloorArea_m2;
	double yearlyGasDemand_m3 = Remaining_gas_demand_m3_p_m2_yr*companyGC.p_floorSurfaceArea_m2;
	double ratioGasUsedForHeating = 1;
	
	f_addHeatDemandProfile(companyGC, yearlyGasDemand_m3, false, ratioGasUsedForHeating);
	
	//Set current scenario heating type
	current_scenario_list.setCurrentHeatingType(companyGC.p_heatingType);
}


//Production asset (PV) ???????????????????????????????????????????
//f_addEnergyProduction(companyGC, OL_EnergyAssetType.PHOTOVOLTAIC, avgc_data.p_avgUtilityPVPower_kWp);



//Battery with capacity 0 (initialize the slider)
f_addStorage(companyGC, 0, 0, OL_EnergyAssetType.STORAGE_ELECTRIC);

//add to scenario: current & future
current_scenario_list.setCurrentBatteryPower_kW(0f);
current_scenario_list.setCurrentBatteryCapacity_kWh(0f);
future_scenario_list.setPlannedBatteryPower_kW(0f);
future_scenario_list.setPlannedBatteryCapacity_kWh(0f);

	
//Transport (total remaining vans and trucks (total as defined in project selection - survey company usage)

//Vans
if(v_remainingAmountOfVans_per_genericCompany > 0){
	for (int k = 0; k< v_remainingAmountOfVans_per_genericCompany; k++){
		f_addDieselVehicle(companyGC, OL_EnergyAssetType.DIESEL_VAN, true, 0);
	}
	
	//Set current scenario trucks
	current_scenario_list.setCurrentDieselVans(v_remainingAmountOfVans_per_genericCompany);
}

//Trucks
if (v_remainingAmountOfTrucks_per_genericCompany > 0){
	for (int k = 0; k< v_remainingAmountOfTrucks_per_genericCompany; k++){
		f_addDieselVehicle(companyGC, OL_EnergyAssetType.DIESEL_TRUCK, true, 0);
	}
	
	//Set current scenario trucks
	current_scenario_list.setCurrentDieselTrucks(v_remainingAmountOfTrucks_per_genericCompany);
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1712762782293</Id>
					<Name><![CDATA[f_createCompaniesGOED]]></Name>
					<Description><![CDATA[Creating the companies (using a single GC) + owned buildings, that have not filled in the survey. If created, they will be simulated using average values, scaled with the totals (CBS data) of the area.]]></Description>
					<ExcludeFromBuild>true</ExcludeFromBuild>
					<X>-440</X><Y>80</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[//Initialize variables
List<GridConnection> generic_company_GCs = new ArrayList(); 
int i = 1;


List<Tuple> rows = selectFrom(panden)
	.where(panden.bedrijf.ne("-"))
	.where(panden.gebruiksdo.ne("woonfunctie"))
	.list();


for (Tuple row : rows) {

	if (!row.get(panden.detail_id).equals("0.0")){ // Check if building is part of a survey company, if yes skip this row
		continue;
	}	

	GCUtility companyGC = energyModel.add_UtilityConnections(); // Create new GC for each building		  

	generic_company_GCs.add(companyGC);	
	
	//Set parameters for the Grid Connection
 	companyGC.p_gridConnectionID = row.get( panden.identifica );

	companyGC.p_connectionCapacity_kW = avgc_data.p_avgUtilityConnectionCapacity_kW;		
	
	companyGC.p_heatingType = avgc_data.p_avgCompanyHeatingMethod; // Assuming all avg companies have GASBURNER. OLD: f_setHeatingType( row.get(panden.verwarming_type ));
	companyGC.p_openbareR = row.get(panden.openbare_r); //straat
	companyGC.p_huisnummer = row.get(panden.huisnummer);
	companyGC.p_huisletter = row.get( panden.huisletter );
	companyGC.p_toevoeging = row.get( panden.toevoeging );
	companyGC.p_postcode = row.get( panden.postcode );
	companyGC.p_woonplaats = row.get( panden.woonplaats );
	companyGC.p_floorSurfaceArea_m2 = row.get(panden.oppervlakt );
	
	//Connect GC to grid node
	//companyGC.p_parentNodeElectricID = row.get( panden.trafo_id );
	
	if (companyGC.p_parentNodeElectricID == null){
		//Set nearest agent as trafo
		GridNode nearestLVStation = companyGC.getNearestAgent(energyModel.c_gridNodesMSLS);
		companyGC.p_parentNodeElectricID = nearestLVStation.p_gridNodeID;
	}
	
	
	//Initialize
	companyGC.f_initialize();
	energyModel.c_gridConnections.add(companyGC);
		
	
	//Create Connection Owner Company
	ConnectionOwner	COC = energyModel.add_pop_connectionOwners(); // Create Connection owner company
	
	COC.p_actorID = "Onbekend bedrijf [" + Integer.toString(i) + "]";
	COC.p_actorType = OL_ActorType.CONNECTIONOWNER;
	COC.p_connectionOwnerType = OL_ConnectionOwnerType.COMPANY;
	COC.p_detailedCompany = "nee";
	
	COC.f_setContractValues(); // MOGELIJK WEGHALEN!
	energyModel.c_connectionOwners.add(COC);
	energyModel.c_actors.add(COC);
	c_connectionOwners.add(COC.p_actorID);
	
	//connect GC with CO
	companyGC.p_owner = COC;	
	companyGC.p_ownerID = COC.p_actorID;
	COC.gridConnections.connectTo( companyGC );
	COC.c_ownedGridConnections.add( companyGC );
	
	
	//create GIS object and connect
	GIS_Building b = f_createGISBuilding( row, companyGC.p_owner );
	zero_Interface.f_styleBuildings(b.gisRegion);
	
	companyGC.c_connectedBuildings.add(b);
	b.c_gridConnectionsInBuilding.add(companyGC);
	companyGC.p_owner.c_ownedBuildings.add(b);
	companyGC.p_floorSurfaceArea_m2 = b.p_floorSurfaceArea_m2;
	companyGC.p_roofSurfaceArea_m2 = b.p_roofSurfaceArea_m2;
	//Increase I, used to create name of unknown building
	i++;
}


v_amountOfCompaniesNoSurvey = c_connectionOwners.size() - c_surveyCompanies.size();
traceln("Amount of companies no survey:");
traceln(v_amountOfCompaniesNoSurvey); 

for (GridConnection GCcompany : generic_company_GCs ) {
	
	//Create EA
	f_iEACompanies(GCcompany);
}
]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1712933951529</Id>
					<Name><![CDATA[f_createRemainingBuildings]]></Name>
					<X>359</X><Y>519</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[List<Tuple> rows = selectFrom(panden).where(panden.bedrijf.eq("-")).list(); // Hessenpoort/Wieken	
//List<Tuple> rows = selectFrom(panden).where(panden.adres.eq("")).list(); // Standaard
	
for (Tuple row : rows) {
	
	GIS_Area area = energyModel.add_pop_GIS_Area();
	area.p_longitude = row.get( panden.longitude );
	area.p_latitude = row.get( panden.latitude );
	area.setLatLon(area.p_latitude, area.p_longitude);		
	area.p_GISRegionAreacoords = row.get(panden.wkt_geom);	
	
	//Building + styling the gisregion and putting it on the map		
	area.gisRegion = zero_Interface.f_createGISObject(f_createGISObjectsTokens(area.p_GISRegionAreacoords));
	zero_Interface.f_styleOtherBuildings(area.gisRegion);
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1713359793878</Id>
					<Name><![CDATA[f_iEACompaniesDeWieken]]></Name>
					<ExcludeFromBuild>true</ExcludeFromBuild>
					<X>830</X><Y>810</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[detail_id]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[companyGC]]></Name>
						<Type><![CDATA[GridConnection]]></Type>
					</Parameter>
					<Body><![CDATA[double ratioGasUsedForHeating = 1;

//Conversie van detail_id naar integer
float floatValue = Float.parseFloat(detail_id);
int id = (int) floatValue;

traceln("Company connection id: %s", companyGC.p_gridConnectionID);
traceln("id uit pandentabel id: %s", id);

/*
J_scenario_Current current_scenario_list = new J_scenario_Current();
zero_Interface.c_scenarioMap_Current.put(companyGC, current_scenario_list);

J_scenario_Future future_scenario_list = new J_scenario_Current();
zero_Interface.c_scenarioMap_Future.put(companyGC, future_scenario_list);
*/

if (id == 99) {
	//traceln("ROVA GridConnection info: " + companyGC + " id: " + detail_id);
	// REMOVE LATER?
	double yearlyElectricityDemand_kWh = uniform_discr(20000, 90000);
	f_addElectricityDemandProfile(companyGC, yearlyElectricityDemand_kWh, false, null);
	
	companyGC.p_heatingType = OL_GridConnectionHeatingType.GASBURNER;
	f_addHeatDemandProfile(companyGC, 0, false, ratioGasUsedForHeating);
	
} else if( id > 0){ //if it is a detailed grid connection
	String idString_full = detail_id; 
	String idString = idString_full.substring(0, idString_full.length() - 2);
	
	
	//Electricity consumption
	if( selectFrom(comp_connections).where(comp_connections.detail_id.eq(id)).firstResult(comp_connections.kwartierwaardes).equals("ja")){ // Check wetehr there is 15-min data available.
		f_addElectricityDemandProfile(companyGC, 0, true, "ccid" + idString);
	}
	
	else { // If not: Use yearly consumption and generic profiles
		f_addElectricityDemandProfile(companyGC, (int) selectFrom(comp_connections).where(comp_connections.detail_id.eq(id)).firstResult(comp_connections.electricity_consumption_k_wh_year), false, null);
	}
	
	//Gas consumption
	int gasConsumption_m3 = (int) selectFrom(comp_connections).where(comp_connections.detail_id.eq(id)).firstResult(comp_connections.gas_consumption_m3_year);
	companyGC.p_heatingType = OL_GridConnectionHeatingType.GASBURNER;
	f_addHeatDemandProfile(companyGC, gasConsumption_m3, false, ratioGasUsedForHeating);
	
	//PV panels
	int installedPV_kW = (int) selectFrom(comp_connections).where(comp_connections.detail_id.eq(id)).firstResult(comp_connections.pv_installed_kw);
	if( installedPV_kW > 0){
		f_addEnergyProduction(companyGC, OL_EnergyAssetType.PHOTOVOLTAIC, "Rooftop Solar", installedPV_kW);
	}
	
	//current_scenario_list.currentPV_kW = selectFrom(comp_connections).where(comp_connections.detail_id.eq(id)).firstResult(comp_connections.pv_installed_kw);
	//future_scenario_list.plannedPV_year = selectFrom(comp_connections).where(comp_connections.detail_id.eq(id)).firstResult(comp_connections.pv_investment_year);
	//future_scenario_list.plannedPV_kW = selectFrom(comp_connections).where(comp_connections.detail_id.eq(id)).firstResult(comp_connections.pv_investment_kw);
	
	//Vehicles

	//Diesel
	int nbDieselTrucks = selectFrom(comp_connections).where(comp_connections.detail_id.eq(id)).firstResult(comp_connections.nb_trucks);
	for (int k = 0; k< nbDieselTrucks; k++){
		f_addTransportDiesel(companyGC, OL_EnergyAssetType.DIESEL_TRUCK, true, 0);
	}
	
	//Electric
	int nbEVTrucks = selectFrom(comp_connections).where(comp_connections.detail_id.eq(id)).firstResult(comp_connections.nb_trucks);
	for (int k = 0; k< nbEVTrucks; k++){
		f_addTransportEV(companyGC, OL_EnergyAssetType.ELECTRIC_TRUCK, true, 0, 0);
	}
		
}
else if ( id == 0) { // If it is not a detailed grid connection: use generic values combined with building data

	double yearlyElectricityDemand_kWh = uniform_discr(20000, 90000);
	f_addElectricityDemandProfile(companyGC, yearlyElectricityDemand_kWh, false, null);
	
	companyGC.p_heatingType = OL_GridConnectionHeatingType.GASBURNER;
	f_addHeatDemandProfile(companyGC, 0, false, ratioGasUsedForHeating);
}]]></Body>
				</Function>
				<Function AccessType="public" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1714561367461</Id>
					<Name><![CDATA[f_addTransportHydrogen]]></Name>
					<X>360</X><Y>270</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[parentGC]]></Name>
						<Type><![CDATA[GridConnection]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[vehicle_type]]></Name>
						<Type><![CDATA[OL_EnergyAssetType]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[isDefaultVehicle]]></Name>
						<Type><![CDATA[boolean]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[annualTravelDistance_km]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Body><![CDATA[double energyConsumption_kWhpkm = 0;
double vehicleScaling = 1.0;

//Hydrogen car
switch (vehicle_type){

	case HYDROGEN_VEHICLE:
		energyConsumption_kWhpkm = avgc_data.p_avgHydrogenConsumptionCar_kWhpkm;
	break;
	
	case HYDROGEN_VAN:
		energyConsumption_kWhpkm = avgc_data.p_avgHydrogenConsumptionVan_kWhpkm;
	break;
	
	case HYDROGEN_TRUCK:
		energyConsumption_kWhpkm = avgc_data.p_avgHydrogenConsumptionTruck_kWhpkm;
	break;
}


if (isDefaultVehicle == false){
	double yearlyTravelDistance_km = annualTravelDistance_km; // ??? Wat doen we hier mee
}

//Create EA and connect to parentGC
J_EAHydrogenVehicle hydrogenVehicle = new J_EAHydrogenVehicle(parentGC, energyConsumption_kWhpkm, energyModel.p_timeStep_h, vehicleScaling, vehicle_type, null);
]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1715158849779</Id>
					<Name><![CDATA[f_runProjectDataFunctions]]></Name>
					<X>870</X><Y>320</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[//Run functions
project_data.f_overwriteAvgValuesAVGCDatabase();
project_data.f_calculateTotalFloorArea();
project_data.f_initializeRemainingTotals();]]></Body>
				</Function>
				<Function AccessType="public" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[List<Tuple>]]></ReturnType>
					<Id>1715860351680</Id>
					<Name><![CDATA[f_PreZeroDatabaseRequest]]></Name>
					<ExcludeFromBuild>true</ExcludeFromBuild>
					<X>560</X><Y>805</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[List<Tuple> rows = selectFrom(prezero).list();
preZero.c_excelData.addAll(rows);
String tableName = "prezero";
List<String> columnNames= selectValues("Select column_name from INFORMATION_SCHEMA.COLUMNS where table_name='"+ tableName.toUpperCase()+"'");
// first entry (AL_ID) is from Anylogic itself, which we don't need
columnNames = columnNames.subList(1, columnNames.size());
Collections.sort(columnNames);

for (int i = 0; i < columnNames.size(); i++) {
	preZero.p_excelDataNames.put(columnNames.get(i), i+1);
}
]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1717150895245</Id>
					<Name><![CDATA[f_iEACompaniesExcel]]></Name>
					<X>830</X><Y>840</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[companyGC]]></Name>
						<Type><![CDATA[GridConnection]]></Type>
					</Parameter>
					<Body><![CDATA[double ratioGasUsedForHeating = 1;

String idString = companyGC.p_gridConnectionID;
int id = roundToInt(Double.valueOf(idString));


J_scenario_Current current_scenario_list = new J_scenario_Current();
zero_Interface.c_scenarioMap_Current.put(companyGC, current_scenario_list);

J_scenario_Future future_scenario_list = new J_scenario_Future();
zero_Interface.c_scenarioMap_Future.put(companyGC, future_scenario_list);


//Electricity consumption
//traceln("Company connection id: %s", selectFrom(comp_connections).where(comp_connections.detail_id.eq(idString)).firstResult(comp_connections.name));
//traceln("id uit pandentabel id: %s", id);

if( selectFrom(comp_connections).where(comp_connections.detail_id.eq(idString)).firstResult(comp_connections.kwartierwaardes).equals("ja")){ // Check wetehr there is 15-min data available.
//if( selectFrom(comp_connections).where(comp_connections.detail_id.eq(id)).kwartierwaardes.equals("ja")){ // Check wetehr there is 15-min data available.
	f_addElectricityDemandProfile(companyGC, 0, true, "ccid" + id);
} else { // If not: Use yearly consumption and generic profiles
	f_addElectricityDemandProfile(companyGC, (int) selectFrom(comp_connections).where(comp_connections.detail_id.eq(idString)).firstResult(comp_connections.electricity_consumption_k_wh_year), false, "Office_other_electricity");
}


//Gas consumption
double gasConsumption_m3 = selectFrom(comp_connections).where(comp_connections.detail_id.eq(idString)).firstResult(comp_connections.gas_consumption_m3_year);
//traceln("gasConsumption_m3: %s",gasConsumption_m3);
//traceln("companyGC.p_floorSurfaceArea_m2: %s", companyGC.p_floorSurfaceArea_m2);
if (gasConsumption_m3>0) {
	f_addHeatDemandProfile(companyGC, gasConsumption_m3, false, ratioGasUsedForHeating);
}

//PV panels
int installedPV_kW = (int) selectFrom(comp_connections).where(comp_connections.detail_id.eq(idString)).firstResult(comp_connections.pv_installed_kw);
if( installedPV_kW > 0){
	f_addEnergyProduction(companyGC, OL_EnergyAssetType.PHOTOVOLTAIC, "solar pannels", installedPV_kW);
}

current_scenario_list.setCurrentPV_kW(installedPV_kW);
future_scenario_list.setPlannedPV_year(selectFrom(comp_connections).where(comp_connections.detail_id.eq(idString)).firstResult(comp_connections.pv_investment_year));
future_scenario_list.setPlannedPV_kW(selectFrom(comp_connections).where(comp_connections.detail_id.eq(idString)).firstResult(comp_connections.pv_investment_kw));

//Vehicles
//Trucks
int nbTrucks = selectFrom(comp_connections).where(comp_connections.detail_id.eq(idString)).firstResult(comp_connections.nb_trucks);
int nbEVTrucks = selectFrom(comp_connections).where(comp_connections.detail_id.eq(idString)).firstResult(comp_connections.nb_etrucks);
	
if (nbTrucks > 0) {
	for (int i = 0; i<nbEVTrucks; i++) {
		f_addElectricVehicle(companyGC, OL_EnergyAssetType.ELECTRIC_TRUCK, true, 0, 0);
		v_remainingAmountOfTrucks--;		
		
	}
	for (int i = 0; i<(nbTrucks-nbEVTrucks); i++) {
		f_addDieselVehicle(companyGC, OL_EnergyAssetType.DIESEL_TRUCK, true, 0);	
		v_remainingAmountOfTrucks--;	
	}
}
current_scenario_list.setCurrentDieselTrucks(nbTrucks);
current_scenario_list.setCurrentEVTrucks(nbEVTrucks);
future_scenario_list.setPlannedEVTrucks(selectFrom(comp_connections).where(comp_connections.detail_id.eq(idString)).firstResult(comp_connections.nb_planned_etrucks));

//Vans
int nbVans = selectFrom(comp_connections).where(comp_connections.detail_id.eq(idString)).firstResult(comp_connections.nb_vans);
int nbEVans = selectFrom(comp_connections).where(comp_connections.detail_id.eq(idString)).firstResult(comp_connections.nb_evans);
	
if (nbVans>0) {
	for (int i = 0; i<nbEVans; i++) {
		f_addElectricVehicle(companyGC, OL_EnergyAssetType.ELECTRIC_VAN, true, 0, 0);
		v_remainingAmountOfVans--;
		
	}
	for (int i = 0; i<(nbVans-nbEVans); i++) {
		f_addDieselVehicle(companyGC, OL_EnergyAssetType.DIESEL_VAN, true, 0);	
		v_remainingAmountOfVans--;
	}
}

current_scenario_list.setCurrentDieselVans(nbVans);
current_scenario_list.setCurrentEVVans(nbEVans);
future_scenario_list.setPlannedEVVans(selectFrom(comp_connections).where(comp_connections.detail_id.eq(idString)).firstResult(comp_connections.nb_planned_evans));

//Cars	
int nbCars= selectFrom(comp_connections).where(comp_connections.detail_id.eq(idString)).firstResult(comp_connections.nb_cars);
int nbEVs = selectFrom(comp_connections).where(comp_connections.detail_id.eq(idString)).firstResult(comp_connections.nb_evs);

if (nbCars>0) {
	for (int i = 0; i<nbEVs; i++) {
		f_addElectricVehicle(companyGC, OL_EnergyAssetType.ELECTRIC_VEHICLE, true, 0, 0);
	}
	for (int i = 0; i<(nbCars-nbEVs); i++) {
		f_addDieselVehicle(companyGC, OL_EnergyAssetType.DIESEL_VEHICLE, true, 0);	
	}
}

current_scenario_list.setCurrentDieselCars(nbCars);
current_scenario_list.setCurrentEVCars(nbEVs);
future_scenario_list.setPlannedEVCars(selectFrom(comp_connections).where(comp_connections.detail_id.eq(idString)).firstResult(comp_connections.nb_planned_evs));

]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[double[]]]></ReturnType>
					<Id>1716555512173</Id>
					<Name><![CDATA[f_createGISTokensFromPolygon]]></Name>
					<X>380</X><Y>560</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[RegionCoords]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Body><![CDATA[
RegionCoords = RegionCoords.replace("Polygon ((","");
RegionCoords = RegionCoords.replace(",","");
RegionCoords = RegionCoords.replace("))","");

if (RegionCoords.contains(")(")) {
	RegionCoords = RegionCoords.split("\\)")[0];
}

String delims = " ";
String[] tokens;
tokens = RegionCoords.split(delims);

int nbCoords = tokens.length;
double[] GISCoords = new double[nbCoords];
		
for (int i=0; i<nbCoords; i++) {
	if (i % 2 == 0) { // latitudes
		GISCoords[i]=Double.parseDouble(tokens[i+1]);
	} else { // longitudes
		GISCoords[i]=Double.parseDouble(tokens[i-1]);
	}
}

return GISCoords;]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1717318072821</Id>
					<Name><![CDATA[f_addBuildingHeatModel]]></Name>
					<X>360</X><Y>310</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[parentGC]]></Name>
						<Type><![CDATA[GridConnection]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[floorArea_m2]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[isolationLevel]]></Name>
						<Type><![CDATA[OL_IsolationLevelHouse]]></Type>
					</Parameter>
					<Body><![CDATA[double maxPowerHeat_kW = 100; 				//Dit is hoeveel vermogen het huis kan afgeven/opnemen, mag willekeurige waarden hebben. Wordt alleen gebruikt in rekenstap van ratio of capacity
double lossfactor_WpK; 						//Dit is wat bepaalt hoeveel warmte het huis verliest/opneemt per tijdstap per delta_T 
double initialTemp = uniform_discr(15,22); 	//starttemperatuur
double heatCapacity_JpK; 					//hoeveel lucht zit er in je huis dat je moet verwarmen?
double solarAbsorptionFactor_m2; 			//hoeveel m2 effectieve ramen zijn er die opwarmen met zonneinstraling

switch (isolationLevel){
	case A:
		lossfactor_WpK = 0.20 * floorArea_m2;
	break;
	case B:
		lossfactor_WpK = 0.35 * floorArea_m2;
	break;
	case C:
		lossfactor_WpK = 0.55 * floorArea_m2;
	break;
	case D:
		lossfactor_WpK = 0.75 * floorArea_m2;
	break;
	default:
		lossfactor_WpK = 0.5 * floorArea_m2;
	break;
}

solarAbsorptionFactor_m2 = floorArea_m2 * 0.1; 

heatCapacity_JpK = floorArea_m2 * 500000;

parentGC.p_BuildingThermalAsset = new J_EABuilding( parentGC, maxPowerHeat_kW, lossfactor_WpK, energyModel.p_timeStep_h, initialTemp, heatCapacity_JpK, solarAbsorptionFactor_m2 );]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1717956562872</Id>
					<Name><![CDATA[f_createChargingStationsScale]]></Name>
					<X>140</X><Y>630</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[nb_publicChargers]]></Name>
						<Type><![CDATA[int]]></Type>
					</Parameter>
					<Body><![CDATA[List<Tuple> stationsList = selectFrom(laadpunten).list();

double EV_adoption_rate = 0.32;
double car_possession_rate = 0.6;
double average_car_mileage = 12000;
double driving_efficiency = 0.2; //kWh/km
double CS_demand_avg = 11368; //kWh/CS

// (int) rint(energyModel.Houses.size() * EV_adoption_rate * average_car_mileage * driving_efficiency / CS_demand_avg);
//traceln("Aantal charging stations: " + nbCStoSimulate);
ConnectionOwner	CPO;
if(nb_publicChargers > 0){
	CPO = energyModel.add_pop_connectionOwners();
	CPO.p_actorID = "CPO";
	CPO.p_actorType = OL_ActorType.CONNECTIONOWNER;
	CPO.p_connectionOwnerType = OL_ConnectionOwnerType.CPO;

	for (int i =0; i < nb_publicChargers ; i++){
	    Tuple row = stationsList.get(i);
		
		GCPublicCharger CS = energyModel.add_PublicChargers();
		CS.p_gridConnectionID = row.get( laadpunten.charging_station );
		CS.p_ownerID = CPO.p_actorID;
		CS.p_connectionCapacity_kW = 17;
		CS.p_floorSurfaceArea_m2 = 1; 
	
		//Initialize
		//CS.p_parentNodeElectricID = Double.toString( row.get( charging_stations.trafo_id )); // TrafoIDs zijn strings
		CS.p_parentNodeElectricID = row.get( laadpunten.trafo_id );
	
		f_addChargingDemandProfile(CS);	
		
		CS.p_latitude = row.get( laadpunten.latitude ) ;
		CS.p_longitude = row.get( laadpunten.longitude );
		CS.setLatLon(CS.p_latitude, CS.p_longitude);
		CS.p_gisregion = f_createGISChargingStation(CS.p_latitude, CS.p_longitude);
	}
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1717956610353</Id>
					<Name><![CDATA[f_addChargingDemandProfile]]></Name>
					<X>360</X><Y>330</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[GC]]></Name>
						<Type><![CDATA[GCPublicCharger]]></Type>
					</Parameter>
					<Body><![CDATA[String profileName = "cs_" + uniform_discr(1, 50);

J_EAProfile profile = new J_EAProfile(GC, OL_EnergyCarrierType.ELECTRICITY, null, OL_ProfileAssetType.CHARGING, energyModel.p_timeStep_h);		
profile.energyAssetName = "charging profile simple";
List<Double> quarterlyEnergyDemand_kWh = selectValues(double.class, "SELECT " + profileName + " FROM charging_profiles;");			
profile.a_energyProfile_kWh = quarterlyEnergyDemand_kWh.stream().mapToDouble(d -> max(0,d)).map( d -> d / 4).toArray();


]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[GISRegion]]></ReturnType>
					<Id>1717956624251</Id>
					<Name><![CDATA[f_createGISChargingStation]]></Name>
					<X>360</X><Y>480</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[lat]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[lon]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Body><![CDATA[//create shape Coords
int nb_points = 6;
double[] GISCoords = new double[nb_points * 2];

for (int i=0; i < nb_points ; i++){
	double size = 0.00006;
	GISCoords[i * 2] = size * cos( i * ( 2 * Math.PI ) / nb_points) + lat;
	GISCoords[i * 2 + 1] = 1.64 * size * sin( i * ( 2 * Math.PI ) / nb_points) + lon;
}

//Create the region
GISRegion gisregion = zero_Interface.f_createGISObject( GISCoords );
zero_Interface.f_styleChargingStation( gisregion );
return gisregion;
]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1717956672376</Id>
					<Name><![CDATA[f_createHousesOLDfromSCALE]]></Name>
					<ExcludeFromBuild>true</ExcludeFromBuild>
					<X>-440</X><Y>50</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[List<Tuple> rows = selectFrom(huizen)
	.where(huizen.gebruiksdo.like("%woonfunctie%")
	.or(huizen.gebruiksdo.eq("overige gebruiksfunctie")))
	.list();

int nbHousesToSimulate = rows.size(); 
	
for (int i =0; i < nbHousesToSimulate ; i++){
	Tuple row = rows.get(i);
	GCHouse house = energyModel.add_Houses();
	ConnectionOwner	COH = energyModel.add_pop_connectionOwners();
	//Set parameters for the Grid Connection
 	house.p_gridConnectionID = row.get( huizen.identifica );
	house.p_ownerID = "House" + house.p_gridConnectionID;	//aanname : huiseigenaar is eigenbaas
	
	//pand gegevens
	house.p_heatingType = p_avgHouseHeatingMethod ;
	house.p_floorSurfaceArea_m2 = row.get( huizen.oppervlakt );
	//GCH.bouwjaar = row.get( residence_objects.bouwjaar );		
	
	//aansluiting gegevens
	house.p_connectionCapacity_kW = p_avgHouseConnectionCapacity_kW;
	
	//adres gegevens
	house.p_openbareR = row.get(huizen.openbare_r);	// straatnaam
	house.p_huisnummer = row.get(huizen.huisnummer);
	house.p_huisletter = row.get( huizen.huisletter );
	house.p_toevoeging = row.get( huizen.toevoeging );
	house.p_postcode = row.get( huizen.postcode );
	house.p_woonplaats = row.get( huizen.woonplaats );
	//house.p_energyLabel = row.get(huizen.energielabel);

	//locatie
	house.p_longitude = row.get(huizen.longitude);
	house.p_latitude = row.get(huizen.latitude);
	house.setLatLon(house.p_latitude, house.p_longitude);
	house.p_pandIdentiteit = row.get( huizen.fuuid );
	
	house.p_parentNodeElectricID = row.get(huizen.netvlak);
	GridNode myParentNodeElectric = findFirst(energyModel.pop_gridNodes, p -> p.p_gridNodeID.equals(house.p_parentNodeElectricID)) ;
	house.l_parentNodeElectric.connectTo(myParentNodeElectric);
	myParentNodeElectric.f_connectToChild(house);

	//Set parameters for the Actor: ConnectionOwner
	COH.p_actorID = house.p_ownerID;
	COH.p_actorType = OL_ActorType.CONNECTIONOWNER;
	COH.p_connectionOwnerType = OL_ConnectionOwnerType.HOUSEHOLD;
	COH.f_setContractValues(); // MOGELIJK WEGHALEN!
	COH.gridConnections.connectTo(house);
	COH.c_ownedGridConnections.add(house);
	
	//Initialize
	house.f_initialize(); // WAT DOET DIT???
	energyModel.c_gridConnections.add(house);
	energyModel.c_connectionOwners.add(COH);
	energyModel.c_actors.add(COH);

	//create GIS object 
	house.p_GISbuilding = f_createGISBuilding( row, v_houseColor );
	house.p_GISbuilding.p_myBaseFillColor = v_houseColor;
	house.p_GISbuilding.p_myBaseLineColor = v_buildingsLineColor;
	house.p_GISbuilding.p_myBaseLineWidth = 0.5;
	
	//Add energy assets
	String heatingtype = row.get(huizen.warmtesysteem);
	f_setHeatingType( house, heatingtype);
	
	double yearlyBaseElectricityDemand_kWh = row.get(huizen.electricity_consumption);
	f_addElectricityDemandProfile("", yearlyBaseElectricityDemand_kWh, house);
	
	if( randomTrue(0.1) ){
		double installedPV_kW = uniform(1,4);
		f_addSolarPanels(installedPV_kW, house);
	}
		
}	
]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1718018939380</Id>
					<Name><![CDATA[f_createChargingStations]]></Name>
					<X>120</X><Y>610</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[//For now for SCALE
if (p_selectedProject == OL_Project.SCALE){
	int nb_publicChargers = 0; //????????????
	f_createChargingStationsScale(nb_publicChargers);
	return;
}
	
List<Tuple> rows = selectFrom(laadpunten).list();
int laadpaal_nr = 1;

for (Tuple row : rows){

	GCPublicCharger chargingStation = energyModel.add_PublicChargers();

	chargingStation.set_p_gridConnectionID( row.get( laadpunten.charging_station ) );
	if (row.get( laadpunten.aansluit_capaciteit_kw ) != null) {
		chargingStation.set_p_connectionCapacity_kW( row.get( laadpunten.aansluit_capaciteit_kw ) );
	}
	chargingStation.set_p_heatingType( OL_GridConnectionHeatingType.NONE );
	chargingStation.p_parentNodeElectricID = row.get( laadpunten.trafo_id );
	traceln("Charging station trafoID: %s", chargingStation.p_parentNodeElectricID);	
	chargingStation.set_p_ownerID( row.get( laadpunten.eigenaar ));	
	if(chargingStation.p_ownerID == null){
		chargingStation.p_ownerID = "Publieke laadpaal "+ laadpaal_nr;
		laadpaal_nr++;
	}

	//Create and connect owner
	ConnectionOwner owner = energyModel.add_pop_connectionOwners();
			
	owner.p_actorID = chargingStation.p_ownerID;
	owner.p_actorType = OL_ActorType.CONNECTIONOWNER;
	owner.p_connectionOwnerType = OL_ConnectionOwnerType.COMPANY;
	owner.p_detailedCompany = "EA_chargingStation";
			 
	
	chargingStation.p_owner = owner;
	
	if( row.get( laadpunten.is_centre )){
		//Create EA for the charging Station (???) --> For now add parameters to the canvas	
		chargingStation.p_amountOfChargers =  row.get( laadpunten.aantal_laders );
		chargingStation.p_maxChargingPower_kW = row.get( laadpunten.laadvermogen_kw );
		
		switch ( row.get( laadpunten.type_voertuig )){
			case "CAR":
			chargingStation.p_chargingVehicleType = OL_EnergyAssetType.ELECTRIC_VEHICLE;
			break;
			case "VAN":
			chargingStation.p_chargingVehicleType = OL_EnergyAssetType.ELECTRIC_VAN;
			break;
			case "TRUCK":
			chargingStation.p_chargingVehicleType = OL_EnergyAssetType.ELECTRIC_TRUCK;
			break;
			default:
			traceln("Unsupported charging station");
		}
	
		//Create EA GIS object (building) for the charging centre
		GIS_Building b = f_createGISBuildingEA( chargingStation.p_gridConnectionID, row.get( laadpunten.latitude ), row.get( laadpunten.longitude ), row.get( laadpunten.polygon) );
		zero_Interface.f_styleChargingStation(b.gisRegion);
		
		b.c_gridConnectionsInBuilding.add(chargingStation);
		chargingStation.c_connectedBuildings.add(b);
		owner.c_ownedBuildings.add(b);
	}
	else if( !row.get( laadpunten.is_centre )){
		//Create GIS object for the chargingStation
		chargingStation.p_gisregion = f_createGISChargingStation(row.get( laadpunten.latitude ), row.get( laadpunten.longitude ));
	}
}




]]></Body>
				</Function>
			</Functions>
			<Connectivity>
				<ExcelFile>
					<Id>1701854785903</Id>
					<Name><![CDATA[inputHouseholdTrips]]></Name>
					<X>860.5</X><Y>409</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<ResourceReference>
						<PackageName><![CDATA[zero_loader]]></PackageName>
						<ClassName><![CDATA[data_Generic/AlbatrossProcessedVehicleTrips.xlsx]]></ClassName>
					</ResourceReference>
					<SaveInSnapshot>false</SaveInSnapshot>
					<LoadOnStartup>true</LoadOnStartup>
					<SaveOnDispose>false</SaveOnDispose>
				</ExcelFile>
				<ExcelFile>
					<Id>1701854788392</Id>
					<Name><![CDATA[inputTruckTrips]]></Name>
					<X>860.5</X><Y>389</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<ResourceReference>
						<PackageName><![CDATA[zero_loader]]></PackageName>
						<ClassName><![CDATA[data_Generic/inputTruckTripPatterns.xlsx]]></ClassName>
					</ResourceReference>
					<SaveInSnapshot>false</SaveInSnapshot>
					<LoadOnStartup>true</LoadOnStartup>
					<SaveOnDispose>false</SaveOnDispose>
				</ExcelFile>
				<ExcelFile>
					<Id>1701854789336</Id>
					<Name><![CDATA[inputCookingActivities]]></Name>
					<X>860</X><Y>370</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<ResourceReference>
						<PackageName><![CDATA[zero_loader]]></PackageName>
						<ClassName><![CDATA[data_Generic/inputECookerPatterns.xlsx]]></ClassName>
					</ResourceReference>
					<SaveInSnapshot>false</SaveInSnapshot>
					<LoadOnStartup>true</LoadOnStartup>
					<SaveOnDispose>false</SaveOnDispose>
				</ExcelFile>
				<ExcelFile>
					<Id>1717940379639</Id>
					<Name><![CDATA[inputProjectInfo]]></Name>
					<X>860</X><Y>430</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<ResourceReference>
						<PackageName><![CDATA[zero_loader]]></PackageName>
						<ClassName><![CDATA[project_info.xlsx]]></ClassName>
					</ResourceReference>
					<SaveInSnapshot>false</SaveInSnapshot>
					<LoadOnStartup>true</LoadOnStartup>
					<SaveOnDispose>false</SaveOnDispose>
				</ExcelFile>
			</Connectivity>
			<AgentLinks>
				<AgentLink>
					<Id>1658477103135</Id>
					<Name><![CDATA[connections]]></Name>
					<ExcludeFromBuild>true</ExcludeFromBuild>
					<X>50</X><Y>-50</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<HandleReceiveInConnections>false</HandleReceiveInConnections>
					<AgentLinkType>COLLECTION_OF_LINKS</AgentLinkType>
					<AgentLinkBidirectional>true</AgentLinkBidirectional>
					<MessageType><![CDATA[Object]]></MessageType>
					<LineStyle>SOLID</LineStyle>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineZOrder>UNDER_AGENTS</LineZOrder>
					<LineArrow>NONE</LineArrow>
					<LineArrowPosition>END</LineArrowPosition>
				</AgentLink>
			</AgentLinks>

			<EmbeddedObjects>
				<EmbeddedObject>
					<Id>1705968304273</Id>
					<Name><![CDATA[project_data]]></Name>
					<X>860</X><Y>190</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<ActiveObjectClass>
						<PackageName><![CDATA[zero_loader]]></PackageName>
						<ClassName><![CDATA[Project_data]]></ClassName>
					</ActiveObjectClass>
					<GenericParameterSubstitute>
						<GenericParameterSubstituteReference>
							<PackageName><![CDATA[zero_loader]]></PackageName>
							<ClassName><![CDATA[Project_data]]></ClassName>
							<ItemName><![CDATA[1705968304270]]></ItemName>
						</GenericParameterSubstituteReference>
					</GenericParameterSubstitute>
					<Parameters>
						<Parameter>
							<Name><![CDATA[project_id]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[project_name]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[map_centre_latitude]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[map_centre_longitude]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[grid_operator]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[energy_coop]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[energy_supplier]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[total_electricity_consumption_companies_kWh_p_yr]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[avg_electricity_consumption_house_kWh_p_yr]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[avg_gas_consumption_house_m3_p_yr]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[total_gas_consumption_companies_m3_p_yr]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[total_cars_houses]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[total_trucks_companies]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[total_floor_area_m2]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[total_vans_companies]]></Name>
						</Parameter>
					</Parameters>
					<ReplicationFlag>false</ReplicationFlag>
					<Replication Class="CodeValue">
						<Code><![CDATA[100]]></Code>
					</Replication>
					<CollectionType>ARRAY_LIST_BASED</CollectionType>
					<InEnvironment>true</InEnvironment>	
					<InitialLocationType>AT_ANIMATION_POSITION</InitialLocationType>
					<XCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</XCode>
					<YCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</YCode>
					<ZCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</ZCode>
					<ColumnCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</ColumnCode>
					<RowCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</RowCode>
					<LatitudeCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</LatitudeCode>
					<LongitudeCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</LongitudeCode>
					<LocationNameCode Class="CodeValue">
						<Code><![CDATA[""]]></Code>
					</LocationNameCode>
					<InitializationType>SPECIFIED_NUMBER</InitializationType>
					<InitializationDatabaseTableQuery>
						<TableReference>
						</TableReference>
					</InitializationDatabaseTableQuery>
					<InitializationDatabaseType>ONE_AGENT_PER_DATABASE_RECORD</InitializationDatabaseType>
					<QuantityColumn>
					</QuantityColumn>
				</EmbeddedObject>
				<EmbeddedObject>
					<Id>1710780080670</Id>
					<Name><![CDATA[avgc_data]]></Name>
					<X>860</X><Y>460</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<ActiveObjectClass>
						<PackageName><![CDATA[zero_loader]]></PackageName>
						<ClassName><![CDATA[AVGC_data]]></ClassName>
					</ActiveObjectClass>
					<GenericParameterSubstitute>
						<GenericParameterSubstituteReference>
							<PackageName><![CDATA[zero_loader]]></PackageName>
							<ClassName><![CDATA[AVGC_data]]></ClassName>
							<ItemName><![CDATA[1710780080667]]></ItemName>
						</GenericParameterSubstituteReference>
					</GenericParameterSubstitute>
					<Parameters>
						<Parameter>
							<Name><![CDATA[p_avgHouseConnectionCapacity_kW]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_avgHouseHeatingMethod]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_avgUtilityConnectionCapacity_kW]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_avgUtilityHeatingMethod]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_avgHouseElectricityConsumption_kWh_yr]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_avgHouseGasConsumption_m3_yr]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_shareOfElectricVehicleOwnership]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_ratioHouseInstalledPV]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_avgHousePVInstallationPower_kWp]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_avgEVStorageCar_kWh]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_avgEVMaxChargePowerCar_kW]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_avgEVStorageVan_kWh]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_avgEVStorageTruck_kWh]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_avgEVMaxChargePowerVan_kW]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_avgEVMaxChargePowerTruck_kW]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_avgEVEnergyConsumptionCar_kWhpkm]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_avgEVEnergyConsumptionVan_kWhpkm]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_avgEVEnergyConsumptionTruck_kWhpkm]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_gas_kWhpm3]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_hydrogenEnergyDensity_kWh_Nm3]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_hydrogenDensity_kg_Nm3]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_oxygenDensity_kg_Nm3]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_oxygenProduction_kgO2pkgH2]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_hydrogenEnergyDensity_kWh_kg]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_diesel_kWhpl]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_avgDieselConsumptionCar_kmpl]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_avgGasolineConsumptionCar_kmpl]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_gasoline_kWhpl]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_avgDieselConsumptionCar_kWhpkm]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_avgGasolineConsumptionCar_kWhpkm]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_avgDieselConsumptionVan_kmpl]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_avgDieselConsumptionVan_kWhpkm]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_avgDieselConsumptionTruck_kmpl]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_avgDieselConsumptionTruck_kWhpkm]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_avgCOPHeatpump]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_avgUtilityPVPower_kWp]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_ratioElectricTrucks]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_avgCompanyHeatingMethod]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_avgPVPower_kWpm2]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_avgRatioBatteryCapacity_v_Power]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_avgHydrogenConsumptionCar_kWhpkm]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_avgHydrogenConsumptionVan_kWhpkm]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_avgHydrogenConsumptionTruck_kWhpkm]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_avgRatioRoofPotentialPV]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_avgEfficiencyHeatpump]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_avgOutputTemperatureHeatpump_degC]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_avgEfficiencyGasBurner]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_avgOutputTemperatureGasBurner_degC]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_avgEfficiencyHydrogenBurner]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_avgOutputTemperatureHydrogenBurner_degC]]></Name>
						</Parameter>
					</Parameters>
					<ReplicationFlag>false</ReplicationFlag>
					<Replication Class="CodeValue">
						<Code><![CDATA[100]]></Code>
					</Replication>
					<CollectionType>ARRAY_LIST_BASED</CollectionType>
					<InEnvironment>true</InEnvironment>	
					<InitialSpeedCode Class="CodeUnitValue">
						<Code><![CDATA[0]]></Code>
						<Unit Class="SpeedUnits"><![CDATA[MPS]]></Unit>
					</InitialSpeedCode>
					<InitialLocationType>AT_ANIMATION_POSITION</InitialLocationType>
					<XCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</XCode>
					<YCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</YCode>
					<ZCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</ZCode>
					<ColumnCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</ColumnCode>
					<RowCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</RowCode>
					<LatitudeCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</LatitudeCode>
					<LongitudeCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</LongitudeCode>
					<LocationNameCode Class="CodeValue">
						<Code><![CDATA[""]]></Code>
					</LocationNameCode>
					<InitializationType>SPECIFIED_NUMBER</InitializationType>
					<InitializationDatabaseTableQuery>
						<TableReference>
						</TableReference>
					</InitializationDatabaseTableQuery>
					<InitializationDatabaseType>ONE_AGENT_PER_DATABASE_RECORD</InitializationDatabaseType>
					<QuantityColumn>
					</QuantityColumn>
				</EmbeddedObject>
				<EmbeddedObject>
					<Id>1716884375037</Id>
					<Name><![CDATA[energyModel]]></Name>
					<X>920</X><Y>590</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<ActiveObjectClass>
						<PackageName><![CDATA[zero_engine]]></PackageName>
						<ClassName><![CDATA[EnergyModel]]></ClassName>
					</ActiveObjectClass>
					<GenericParameterSubstitute>
						<GenericParameterSubstituteReference>
							<PackageName><![CDATA[zero_engine]]></PackageName>
							<ClassName><![CDATA[EnergyModel]]></ClassName>
							<ItemName><![CDATA[1658477103138]]></ItemName>
						</GenericParameterSubstituteReference>
					</GenericParameterSubstitute>
					<Parameters>
						<Parameter>
							<Name><![CDATA[p_timeStep_h]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[b_addKpiVisuals]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_undergroundTemperature_degC]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[j_dataOut]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[j_experimentSettingsData]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_parallelize]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[j_simulationResults]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_forecastTime_h]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[j_hourlyCurvesData]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[b_anylogicCostsForAllContracts]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[b_storeProfiles]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_startHourWinterWeek]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_startHourSummerWeek]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_plotInterval_h]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_truckTripsExcel]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_householdTripsExcel]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_cookingPatternExcel]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_year]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[avgc_data]]></Name>
						</Parameter>
					</Parameters>
					<ReplicationFlag>false</ReplicationFlag>
					<Replication Class="CodeValue">
						<Code><![CDATA[100]]></Code>
					</Replication>
					<CollectionType>ARRAY_LIST_BASED</CollectionType>
					<InEnvironment>true</InEnvironment>	
					<InitialLocationType>AT_ANIMATION_POSITION</InitialLocationType>
					<XCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</XCode>
					<YCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</YCode>
					<ZCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</ZCode>
					<ColumnCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</ColumnCode>
					<RowCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</RowCode>
					<LatitudeCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</LatitudeCode>
					<LongitudeCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</LongitudeCode>
					<LocationNameCode Class="CodeValue">
						<Code><![CDATA[""]]></Code>
					</LocationNameCode>
					<InitializationType>SPECIFIED_NUMBER</InitializationType>
					<InitializationDatabaseTableQuery>
						<TableReference>
						</TableReference>
					</InitializationDatabaseTableQuery>
					<InitializationDatabaseType>ONE_AGENT_PER_DATABASE_RECORD</InitializationDatabaseType>
					<QuantityColumn>
					</QuantityColumn>
				</EmbeddedObject>
				<EmbeddedObject>
					<Id>1716884472682</Id>
					<Name><![CDATA[zero_Interface]]></Name>
					<X>920</X><Y>570</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<ActiveObjectClass>
						<PackageName><![CDATA[zero_interface]]></PackageName>
						<ClassName><![CDATA[Zero_Interface]]></ClassName>
					</ActiveObjectClass>
					<GenericParameterSubstitute>
						<GenericParameterSubstituteReference>
							<PackageName><![CDATA[zero_interface]]></PackageName>
							<ClassName><![CDATA[Zero_Interface]]></ClassName>
							<ItemName><![CDATA[1658477103138]]></ItemName>
						</GenericParameterSubstituteReference>
					</GenericParameterSubstitute>
					<Parameters>
						<Parameter>
							<Name><![CDATA[energyModel]]></Name>
							<Value Class="CodeValue">
								<Code><![CDATA[energyModel]]></Code>
							</Value>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_selectedProject]]></Name>
							<Value Class="CodeValue">
								<Code><![CDATA[p_selectedProject]]></Code>
							</Value>
						</Parameter>
						<Parameter>
							<Name><![CDATA[map_centre_latitude]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[map_centre_longitude]]></Name>
						</Parameter>
					</Parameters>
					<ReplicationFlag>false</ReplicationFlag>
					<Replication Class="CodeValue">
						<Code><![CDATA[100]]></Code>
					</Replication>
					<CollectionType>ARRAY_LIST_BASED</CollectionType>
					<InEnvironment>true</InEnvironment>	
					<InitialLocationType>AT_ANIMATION_POSITION</InitialLocationType>
					<XCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</XCode>
					<YCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</YCode>
					<ZCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</ZCode>
					<ColumnCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</ColumnCode>
					<RowCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</RowCode>
					<LatitudeCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</LatitudeCode>
					<LongitudeCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</LongitudeCode>
					<LocationNameCode Class="CodeValue">
						<Code><![CDATA[""]]></Code>
					</LocationNameCode>
					<InitializationType>SPECIFIED_NUMBER</InitializationType>
					<InitializationDatabaseTableQuery>
						<TableReference>
						</TableReference>
					</InitializationDatabaseTableQuery>
					<InitializationDatabaseType>ONE_AGENT_PER_DATABASE_RECORD</InitializationDatabaseType>
					<QuantityColumn>
					</QuantityColumn>
				</EmbeddedObject>
				<EmbeddedObject>
					<Id>1718013593231</Id>
					<Name><![CDATA[preZero]]></Name>
					<X>560</X><Y>825</Y>
					<Label><X>20</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<ActiveObjectClass>
						<PackageName><![CDATA[prezero]]></PackageName>
						<ClassName><![CDATA[PreZero]]></ClassName>
					</ActiveObjectClass>
					<GenericParameterSubstitute>
						<GenericParameterSubstituteReference>
							<PackageName><![CDATA[prezero]]></PackageName>
							<ClassName><![CDATA[PreZero]]></ClassName>
							<ItemName><![CDATA[1715692071858]]></ItemName>
						</GenericParameterSubstituteReference>
					</GenericParameterSubstitute>
					<Parameters>
						<Parameter>
							<Name><![CDATA[p_excelDataNames]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[zero_Interface]]></Name>
							<Value Class="CodeValue">
								<Code><![CDATA[zero_Interface]]></Code>
							</Value>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_buildingShape]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_zoneShape]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_shapeZone]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_shapeBuilding]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[p_buildingsZones]]></Name>
						</Parameter>
					</Parameters>
					<ReplicationFlag>false</ReplicationFlag>
					<Replication Class="CodeValue">
						<Code><![CDATA[100]]></Code>
					</Replication>
					<CollectionType>ARRAY_LIST_BASED</CollectionType>
					<InEnvironment>true</InEnvironment>	
					<InitialLocationType>AT_ANIMATION_POSITION</InitialLocationType>
					<XCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</XCode>
					<YCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</YCode>
					<ZCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</ZCode>
					<ColumnCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</ColumnCode>
					<RowCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</RowCode>
					<LatitudeCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</LatitudeCode>
					<LongitudeCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</LongitudeCode>
					<LocationNameCode Class="CodeValue">
						<Code><![CDATA[""]]></Code>
					</LocationNameCode>
					<InitializationType>SPECIFIED_NUMBER</InitializationType>
					<InitializationDatabaseTableQuery>
						<TableReference>
						</TableReference>
					</InitializationDatabaseTableQuery>
					<InitializationDatabaseType>ONE_AGENT_PER_DATABASE_RECORD</InitializationDatabaseType>
					<QuantityColumn>
					</QuantityColumn>
				</EmbeddedObject>
			</EmbeddedObjects>

			<Presentation>
				<Level>
					<Id>1658477103139</Id>
					<Name><![CDATA[level]]></Name>
					<X>0</X><Y>0</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<Z>0</Z>
					<LevelVisibility>DIM_NON_CURRENT</LevelVisibility>

			<Presentation>
				<Rectangle>
					<Id>1665052211228</Id>
					<Name><![CDATA[rectangle]]></Name>
					<X>60</X><Y>40</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Lock>true</Lock>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>3</LineWidth>
					<LineColor>-16744448</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>1000</Width>
					<Height>850</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-1</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1659709765242</Id>
					<Name><![CDATA[text1]]></Name>
					<X>609</X><Y>99</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Input Parameters:]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Rectangle>
					<Id>1665052603927</Id>
					<Name><![CDATA[rectangle2]]></Name>
					<X>60</X><Y>40</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>3</LineWidth>
					<LineColor>-16744448</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>169</Width>
					<Height>40</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-1</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1665052191319</Id>
					<Name><![CDATA[text3]]></Name>
					<X>95</X><Y>47</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16744448</Color>
					<Text><![CDATA[Input]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>18</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1701854785901</Id>
					<Name><![CDATA[text12]]></Name>
					<X>850</X><Y>340</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Basic Input files:]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1701878902440</Id>
					<Name><![CDATA[text59]]></Name>
					<X>850</X><Y>210</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Project specific input files:]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1702552757694</Id>
					<Name><![CDATA[text251]]></Name>
					<X>79</X><Y>99</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Model startup:]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1703002180360</Id>
					<Name><![CDATA[text253]]></Name>
					<X>849</X><Y>99</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Input files:]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1709922419642</Id>
					<Name><![CDATA[text4]]></Name>
					<X>349</X><Y>99</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Add EA functions]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1710866803941</Id>
					<Name><![CDATA[text7]]></Name>
					<X>349</X><Y>389</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[GIS Object functions]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1712068181881</Id>
					<Name><![CDATA[text8]]></Name>
					<X>99</X><Y>649</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Project data Tracking]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Rectangle>
					<Id>1713359816661</Id>
					<Name><![CDATA[rectangle1]]></Name>
					<X>800</X><Y>770</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>3</LineWidth>
					<LineColor>-16711936</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>250</Width>
					<Height>100</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-1</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1713359834865</Id>
					<Name><![CDATA[text]]></Name>
					<X>820</X><Y>780</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[De Wieken specifiek]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Rectangle>
					<Id>1715860219631</Id>
					<Name><![CDATA[rectangle3]]></Name>
					<X>530</X><Y>770</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>3</LineWidth>
					<LineColor>-10496</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>250</Width>
					<Height>100</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-1</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1715860244274</Id>
					<Name><![CDATA[PreZero]]></Name>
					<X>535</X><Y>775</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[PreZero]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1715953229608</Id>
					<Name><![CDATA[text2]]></Name>
					<X>610</X><Y>260</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Time loggers]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Rectangle>
					<Id>1715953510746</Id>
					<Name><![CDATA[rectangle4]]></Name>
					<X>890</X><Y>530</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>3</LineWidth>
					<LineColor>-16744448</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>170</Width>
					<Height>80</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-1</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1715953476078</Id>
					<Name><![CDATA[text5]]></Name>
					<X>900</X><Y>540</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Connected Models]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Control Type="Button">
				 	<EmbeddedIcon>false</EmbeddedIcon>				
					<Id>1718094309653</Id>
					<Name><![CDATA[button]]></Name>
					<ExcludeFromBuild>true</ExcludeFromBuild>
					<X>555</X><Y>835</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<BasicProperties Width="180" Height="30">
                        <EmbeddedIcon>false</EmbeddedIcon>	
						<TextColor/>
						<Enabled>true</Enabled>
						<ActionCode><![CDATA[preZero.f_initialise();
preZero.va_prezero.navigateTo();]]></ActionCode>
					</BasicProperties>
					<ExtendedProperties>
						<Font Name="Dialog" Size="11" Style="0"/>
						<LabelText><![CDATA[Go To PreZero]]></LabelText>
					</ExtendedProperties>
				</Control>
			</Presentation>

				</Level>
				<Level>
					<Id>1699290897134</Id>
					<Name><![CDATA[level1]]></Name>
					<X>0</X><Y>0</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<Z>0</Z>
					<LevelVisibility>DIM_NON_CURRENT</LevelVisibility>


				</Level>
			</Presentation>
			<Areas>
				<Area>
					<Id>1716988511789</Id>
					<Name><![CDATA[viewArea]]></Name>
					<X>0</X><Y>0</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Title><![CDATA[]]></Title>
					<Width>1920</Width>
					<Height>980</Height>
				</Area>
			</Areas>

		</ActiveObjectClass>
		<!--   =========   Active Object Class   ========  -->
		<ActiveObjectClass>
			<Id>1705968304264</Id>
			<Name><![CDATA[Project_data]]></Name>
			<Generic>false</Generic>
			<GenericParameter>
				<Id>1705968304270</Id>
				<Name><![CDATA[1705968304270]]></Name>
				<GenericParameterValue Class="CodeValue">
					<Code><![CDATA[T extends Agent]]></Code>
				</GenericParameterValue>
				<GenericParameterLabel><![CDATA[Generic parameter:]]></GenericParameterLabel>
			</GenericParameter>
			<FlowChartsUsage>ENTITY</FlowChartsUsage>
			<SamplesToKeep>100</SamplesToKeep>
			<LimitNumberOfArrayElements>false</LimitNumberOfArrayElements>
			<ElementsLimitValue>100</ElementsLimitValue>
			<MakeDefaultViewArea>true</MakeDefaultViewArea>
			<SceneGridColor/>
			<SceneBackgroundColor/>
			<SceneSkybox>null</SceneSkybox>
			<AgentProperties>
				<EnvironmentDefinesInitialLocation>true</EnvironmentDefinesInitialLocation>
				<RotateAnimationTowardsMovement>true</RotateAnimationTowardsMovement>
				<RotateAnimationVertically>false</RotateAnimationVertically>
				<VelocityCode Class="CodeUnitValue">
					<Code><![CDATA[10]]></Code>
					<Unit Class="SpeedUnits"><![CDATA[MPS]]></Unit>
				</VelocityCode>
				<PhysicalLength Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalLength>
				<PhysicalWidth Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalWidth>
				<PhysicalHeight Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalHeight>
			</AgentProperties>
			<EnvironmentProperties>
					<EnableSteps>false</EnableSteps>
					<StepDurationCode Class="CodeUnitValue">
						<Code><![CDATA[1.0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
					</StepDurationCode>
					<SpaceType>CONTINUOUS</SpaceType>
					<WidthCode><![CDATA[500]]></WidthCode>
					<HeightCode><![CDATA[500]]></HeightCode>
					<ZHeightCode><![CDATA[0]]></ZHeightCode>
					<ColumnsCountCode><![CDATA[100]]></ColumnsCountCode>
					<RowsCountCode><![CDATA[100]]></RowsCountCode>
					<NeigborhoodType>MOORE</NeigborhoodType>
					<LayoutType>USER_DEF</LayoutType>
					<LayoutTypeApplyOnStartup>true</LayoutTypeApplyOnStartup>
					<NetworkType>USER_DEF</NetworkType>
					<NetworkTypeApplyOnStartup>true</NetworkTypeApplyOnStartup>
					<ConnectionsPerAgentCode><![CDATA[2]]></ConnectionsPerAgentCode>
					<ConnectionsRangeCode><![CDATA[50]]></ConnectionsRangeCode>
					<NeighborLinkFractionCode><![CDATA[0.95]]></NeighborLinkFractionCode>
					<MCode><![CDATA[10]]></MCode>
			</EnvironmentProperties>
			<DatasetsCreationProperties>
				<AutoCreate>true</AutoCreate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1705996800000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[HOUR]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[1]]></Code>
						<Unit Class="TimeUnits"><![CDATA[HOUR]]></Unit>
					</RecurrenceCode>
			</DatasetsCreationProperties>
			<ScaleRuler>
				<Id>1705968304267</Id>
				<Name><![CDATA[scale]]></Name>
				<X>0</X><Y>-150</Y>
				<PublicFlag>false</PublicFlag>
				<PresentationFlag>false</PresentationFlag>
				<ShowLabel>false</ShowLabel>
				<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
				<Length>100</Length>
				<Rotation>0</Rotation>
				<ScaleType>BASED_ON_LENGTH</ScaleType>
				<ModelLength>10</ModelLength>
				<LengthUnits>METER</LengthUnits>
				<Scale>10</Scale>
				<InheritedFromParentAgentType>true</InheritedFromParentAgentType>
			</ScaleRuler>
			<CurrentLevel>1705968304271</CurrentLevel>
			<ConnectionsId>1705968304265</ConnectionsId>
			<Variables>
				<Variable Class="Parameter">
					<Id>1705968454675</Id>
					<Name><![CDATA[project_id]]></Name>
					<X>50</X><Y>90</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<ParameterEditor>
							<Id>1705968454673</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1705968467497</Id>
					<Name><![CDATA[project_name]]></Name>
					<X>50</X><Y>110</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[String]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<ParameterEditor>
							<Id>1705968467495</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1705968514658</Id>
					<Name><![CDATA[map_centre_latitude]]></Name>
					<X>50</X><Y>190</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<ParameterEditor>
							<Id>1705968514656</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1705968514661</Id>
					<Name><![CDATA[map_centre_longitude]]></Name>
					<X>50</X><Y>210</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<ParameterEditor>
							<Id>1705968514659</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1705968754427</Id>
					<Name><![CDATA[grid_operator]]></Name>
					<X>50</X><Y>290</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[String]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<ParameterEditor>
							<Id>1705968754425</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1705968754437</Id>
					<Name><![CDATA[energy_coop]]></Name>
					<X>50</X><Y>310</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[String]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<ParameterEditor>
							<Id>1705968754435</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1706016850641</Id>
					<Name><![CDATA[energy_supplier]]></Name>
					<X>50</X><Y>330</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[String]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA["None"]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1706016850639</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1712068328709</Id>
					<Name><![CDATA[total_electricity_consumption_companies_kWh_p_yr]]></Name>
					<X>50</X><Y>410</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1712068328707</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1712068356457</Id>
					<Name><![CDATA[avg_electricity_consumption_house_kWh_p_yr]]></Name>
					<X>50</X><Y>450</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<ParameterEditor>
							<Id>1712068356455</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1712068376901</Id>
					<Name><![CDATA[avg_gas_consumption_house_m3_p_yr]]></Name>
					<X>50</X><Y>470</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<ParameterEditor>
							<Id>1712068376899</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1712220095781</Id>
					<Name><![CDATA[total_gas_consumption_companies_m3_p_yr]]></Name>
					<X>50</X><Y>430</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1712220095779</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1712220138491</Id>
					<Name><![CDATA[total_cars_houses]]></Name>
					<X>50</X><Y>490</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1712220138489</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1712220153300</Id>
					<Name><![CDATA[total_trucks_companies]]></Name>
					<X>50</X><Y>530</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1712220153298</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1712223694791</Id>
					<Name><![CDATA[total_floor_area_m2]]></Name>
					<X>50</X><Y>550</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1712223694789</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1715632764282</Id>
					<Name><![CDATA[total_vans_companies]]></Name>
					<X>50</X><Y>510</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1715632764280</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="CollectionVariable">
					<Id>1707913065894</Id>
					<Name><![CDATA[c_detailModelCompanies]]></Name>
					<X>230</X><Y>90</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" AccessType="public" StaticVariable="false">
						<CollectionClass><![CDATA[ArrayList]]></CollectionClass>
						<ElementClass><![CDATA[String]]></ElementClass>
						<ValueElementClass><![CDATA[String]]></ValueElementClass>
					</Properties>

				</Variable>
			</Variables>
			<Functions>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1712220050599</Id>
					<Name><![CDATA[f_overwriteAvgValuesAVGCDatabase]]></Name>
					<X>50</X><Y>610</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[if (avg_electricity_consumption_house_kWh_p_yr < 0){
loader.avgc_data.p_avgHouseElectricityConsumption_kWh_yr = avg_electricity_consumption_house_kWh_p_yr;
}
if (avg_gas_consumption_house_m3_p_yr < 0){
loader.avgc_data.p_avgHouseGasConsumption_m3_yr = avg_gas_consumption_house_m3_p_yr;
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1712223801940</Id>
					<Name><![CDATA[f_calculateTotalFloorArea]]></Name>
					<X>50</X><Y>630</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[List<Tuple> rows = selectFrom(panden)
	.where(panden.bedrijf.ne("-"))
	.where(panden.gebruiksdo.ne("woonfunctie"))
	.list();

for (Tuple row : rows) {
	total_floor_area_m2 += row.get( panden.oppervla_1 );
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1712925156313</Id>
					<Name><![CDATA[f_initializeRemainingTotals]]></Name>
					<X>50</X><Y>650</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[//Initialize remaining totals of the area
loader.v_remainingFloorArea_m2 = total_floor_area_m2;
loader.v_remainingAmountOfVans = total_vans_companies;
loader.v_remainingAmountOfTrucks = total_trucks_companies;
loader.v_remainingElectricityConsumption_kWh = total_electricity_consumption_companies_kWh_p_yr;
loader.v_remainingGasConsumption_m3 = total_gas_consumption_companies_m3_p_yr;]]></Body>
				</Function>
			</Functions>
			<AgentLinks>
				<AgentLink>
					<Id>1705968304265</Id>
					<Name><![CDATA[connections]]></Name>
					<ExcludeFromBuild>true</ExcludeFromBuild>
					<X>50</X><Y>-50</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<HandleReceiveInConnections>false</HandleReceiveInConnections>
					<AgentLinkType>COLLECTION_OF_LINKS</AgentLinkType>
					<AgentLinkBidirectional>true</AgentLinkBidirectional>
					<MessageType><![CDATA[Object]]></MessageType>
					<LineStyle>SOLID</LineStyle>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineZOrder>UNDER_AGENTS</LineZOrder>
					<LineArrow>NONE</LineArrow>
					<LineArrowPosition>END</LineArrowPosition>
				</AgentLink>
			</AgentLinks>

			<ContainerLinks>
				<ContainerLink>
					<Id>1705968304317</Id>
					<Name><![CDATA[loader]]></Name>
					<X>50</X><Y>-100</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<ActiveObjectClass>
						<PackageName><![CDATA[zero_loader]]></PackageName>
						<ClassName><![CDATA[Loader]]></ClassName>
					</ActiveObjectClass>
				</ContainerLink>
			</ContainerLinks>

			<Presentation>
				<Level>
					<Id>1705968304271</Id>
					<Name><![CDATA[level]]></Name>
					<X>0</X><Y>0</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<Z>0</Z>
					<LevelVisibility>DIM_NON_CURRENT</LevelVisibility>

			<Presentation>
				<Text>
					<Id>1705968923210</Id>
					<Name><![CDATA[text]]></Name>
					<X>40</X><Y>60</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Project ID]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1705969065387</Id>
					<Name><![CDATA[text3]]></Name>
					<X>40</X><Y>260</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Project specific actors]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1705969100665</Id>
					<Name><![CDATA[text4]]></Name>
					<X>40</X><Y>160</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Project map coordinates]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1707910540148</Id>
					<Name><![CDATA[text5]]></Name>
					<X>220</X><Y>60</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Project detail model companies]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1712068252420</Id>
					<Name><![CDATA[text1]]></Name>
					<X>40</X><Y>380</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Project specific energy consumption totals and averages]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
			</Presentation>

				</Level>
			</Presentation>

		</ActiveObjectClass>
		<!--   =========   Active Object Class   ========  -->
		<ActiveObjectClass>
			<Id>1710780080661</Id>
			<Name><![CDATA[AVGC_data]]></Name>
			<StartupCode><![CDATA[f_setAVGC_data();]]></StartupCode>
			<Generic>false</Generic>
			<GenericParameter>
				<Id>1710780080667</Id>
				<Name><![CDATA[1710780080667]]></Name>
				<GenericParameterValue Class="CodeValue">
					<Code><![CDATA[T extends Agent]]></Code>
				</GenericParameterValue>
				<GenericParameterLabel><![CDATA[Generic parameter:]]></GenericParameterLabel>
			</GenericParameter>
			<FlowChartsUsage>ENTITY</FlowChartsUsage>
			<SamplesToKeep>100</SamplesToKeep>
			<LimitNumberOfArrayElements>false</LimitNumberOfArrayElements>
			<ElementsLimitValue>100</ElementsLimitValue>
			<MakeDefaultViewArea>true</MakeDefaultViewArea>
			<SceneGridColor/>
			<SceneBackgroundColor/>
			<SceneSkybox>null</SceneSkybox>
			<AgentProperties>
				<EnvironmentDefinesInitialLocation>true</EnvironmentDefinesInitialLocation>
				<RotateAnimationTowardsMovement>true</RotateAnimationTowardsMovement>
				<RotateAnimationVertically>false</RotateAnimationVertically>
				<VelocityCode Class="CodeUnitValue">
					<Code><![CDATA[10]]></Code>
					<Unit Class="SpeedUnits"><![CDATA[MPS]]></Unit>
				</VelocityCode>
				<PhysicalLength Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalLength>
				<PhysicalWidth Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalWidth>
				<PhysicalHeight Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalHeight>
			</AgentProperties>
			<EnvironmentProperties>
					<EnableSteps>false</EnableSteps>
					<StepDurationCode Class="CodeUnitValue">
						<Code><![CDATA[1.0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
					</StepDurationCode>
					<SpaceType>CONTINUOUS</SpaceType>
					<WidthCode><![CDATA[500]]></WidthCode>
					<HeightCode><![CDATA[500]]></HeightCode>
					<ZHeightCode><![CDATA[0]]></ZHeightCode>
					<ColumnsCountCode><![CDATA[100]]></ColumnsCountCode>
					<RowsCountCode><![CDATA[100]]></RowsCountCode>
					<NeigborhoodType>MOORE</NeigborhoodType>
					<LayoutType>USER_DEF</LayoutType>
					<LayoutTypeApplyOnStartup>true</LayoutTypeApplyOnStartup>
					<NetworkType>USER_DEF</NetworkType>
					<NetworkTypeApplyOnStartup>true</NetworkTypeApplyOnStartup>
					<ConnectionsPerAgentCode><![CDATA[2]]></ConnectionsPerAgentCode>
					<ConnectionsRangeCode><![CDATA[50]]></ConnectionsRangeCode>
					<NeighborLinkFractionCode><![CDATA[0.95]]></NeighborLinkFractionCode>
					<MCode><![CDATA[10]]></MCode>
			</EnvironmentProperties>
			<DatasetsCreationProperties>
				<AutoCreate>true</AutoCreate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1710835200000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[HOUR]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[1]]></Code>
						<Unit Class="TimeUnits"><![CDATA[HOUR]]></Unit>
					</RecurrenceCode>
			</DatasetsCreationProperties>
			<ScaleRuler>
				<Id>1710780080664</Id>
				<Name><![CDATA[scale]]></Name>
				<X>0</X><Y>-150</Y>
				<PublicFlag>false</PublicFlag>
				<PresentationFlag>false</PresentationFlag>
				<ShowLabel>false</ShowLabel>
				<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
				<Length>100</Length>
				<Rotation>0</Rotation>
				<ScaleType>BASED_ON_LENGTH</ScaleType>
				<ModelLength>10</ModelLength>
				<LengthUnits>METER</LengthUnits>
				<Scale>10</Scale>
				<InheritedFromParentAgentType>true</InheritedFromParentAgentType>
			</ScaleRuler>
			<CurrentLevel>1710780080668</CurrentLevel>
			<ConnectionsId>1710780080662</ConnectionsId>
			<Variables>
				<Variable Class="Parameter">
					<Id>1710780736141</Id>
					<Name><![CDATA[p_avgHouseConnectionCapacity_kW]]></Name>
					<Description><![CDATA[https://www.enexis.nl/aansluitingen/welke-aansluiting-heb-ik-nodig
3*25 A --> 3*25*230 = 17.25 kW]]></Description>
					<X>60</X><Y>160</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[17.25]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1710780736139</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1710780736147</Id>
					<Name><![CDATA[p_avgHouseHeatingMethod]]></Name>
					<X>60</X><Y>178.976</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[OL_GridConnectionHeatingType]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[OL_GridConnectionHeatingType.GASBURNER]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1710780736145</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1710780736150</Id>
					<Name><![CDATA[p_avgUtilityConnectionCapacity_kW]]></Name>
					<Description><![CDATA[https://www.enexis.nl/aansluitingen/welke-aansluiting-heb-ik-nodig]]></Description>
					<X>60</X><Y>340</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[17.25]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1710780736148</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1710780736153</Id>
					<Name><![CDATA[p_avgUtilityHeatingMethod]]></Name>
					<X>60</X><Y>320</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[OL_GridConnectionHeatingType]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[OL_GridConnectionHeatingType.GASBURNER]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1710780736151</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1710780736156</Id>
					<Name><![CDATA[p_avgHouseElectricityConsumption_kWh_yr]]></Name>
					<Description><![CDATA[- https://www.milieucentraal.nl/energie-besparen/inzicht-in-je-energierekening/gemiddeld-energieverbruik/
- https://www.overstappen.nl/energie/gemiddeld-energieverbruik/ 
--> 2479 kWh/yr is the average of NL
--> Overwrite if numbers are available in the project selection agent
]]></Description>
					<X>60</X><Y>138.976</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[2479]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1710780736154</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1710780736159</Id>
					<Name><![CDATA[p_avgHouseGasConsumption_m3_yr]]></Name>
					<Description><![CDATA[- https://www.overstappen.nl/energie/gemiddeld-energieverbruik/
- https://www.milieucentraal.nl/energie-besparen/inzicht-in-je-energierekening/gemiddeld-energieverbruik/
 --> 1169 m3 is the average of NL
--> Overwrite if numbers are available in the project selection agent
]]></Description>
					<X>60</X><Y>118.976</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[1169]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1710780736157</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1710780736162</Id>
					<Name><![CDATA[p_shareOfElectricVehicleOwnership]]></Name>
					<Description><![CDATA[share of EVs in the netherlands. --> 5% (feb 2024).

https://www.rvo.nl/onderwerpen/elektrisch-vervoer/stand-van-zaken ]]></Description>
					<X>60</X><Y>198.976</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0.05]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1710780736160</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1710780736165</Id>
					<Name><![CDATA[p_ratioHouseInstalledPV]]></Name>
					<Description><![CDATA[How many houses have installed PV in The Netherlands: 25% (end of 2022)
https://solarmagazine.nl/nieuws-zonne-energie/i34591/de-harde-cijfers-drenthe-verstevigt-koppositie-38-procent-woningen-heeft-zonnepanelen]]></Description>
					<X>60</X><Y>220</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0.25]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1710780736163</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1710780736168</Id>
					<Name><![CDATA[p_avgHousePVInstallationPower_kWp]]></Name>
					<Description><![CDATA[volgens gegevens van het CBS (Centraal Bureau voor de Statistiek) en RVO (Rijksdienst voor Ondernemend Nederland), was het gemiddelde geïnstalleerde piekvermogen van residentiële zonnepanelen in Nederland in 2020 ongeveer 4 kilowatt piek (kWp) per huishouden. --> 4kWp]]></Description>
					<X>60</X><Y>240</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[4]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1710780736166</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1710780736171</Id>
					<Name><![CDATA[p_avgEVStorageCar_kWh]]></Name>
					<Description><![CDATA[-https://www.eonenergy.com/electric-vehicle-charging/running-costs-and-benefits/battery-capacity-and-lifespan.html

-https://www.edi.be/blog/laadstation-3/hoe-is-het-gesteld-met-de-autonomie-van-de-elektrische-auto-in-2023-12

40 kWh (kleine autos)

50-80 kWh (middel grote autos) 

80-100 kWh (grote autos)

Minimaal: 116 kWh minimum nodig, anders soms negatieve SOC.]]></Description>
					<X>410</X><Y>190</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[116]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1710780736169</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1710780736174</Id>
					<Name><![CDATA[p_avgEVMaxChargePowerCar_kW]]></Name>
					<Description><![CDATA[Bron???]]></Description>
					<X>410</X><Y>120</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[11]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1710780736172</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1710780956093</Id>
					<Name><![CDATA[p_avgEVStorageVan_kWh]]></Name>
					<Description><![CDATA[????]]></Description>
					<X>410</X><Y>210</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[200]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1710780956091</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1710780970036</Id>
					<Name><![CDATA[p_avgEVStorageTruck_kWh]]></Name>
					<Description><![CDATA[??]]></Description>
					<X>410</X><Y>230</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[500]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1710780970034</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1710780980568</Id>
					<Name><![CDATA[p_avgEVMaxChargePowerVan_kW]]></Name>
					<Description><![CDATA[Bron???]]></Description>
					<X>410</X><Y>140</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[11]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1710780980566</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1710781005280</Id>
					<Name><![CDATA[p_avgEVMaxChargePowerTruck_kW]]></Name>
					<Description><![CDATA[Bron???]]></Description>
					<X>410</X><Y>160</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[200]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1710781005278</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1710781038321</Id>
					<Name><![CDATA[p_avgEVEnergyConsumptionCar_kWhpkm]]></Name>
					<Description><![CDATA[https://ev-database.org/nl/auto/1555/Tesla-Model-3: 0.142 kWh/km

https://www.vattenfall.nl/elektrische-auto/verbruik/

--> Tesla model 3: 15.1 kWh per 100 km --> 0.151 kWh/km
--> Kia niro: 17.1 kWh per 100 km --> 0.171 kWh/km
--> taking 0.16 kWh/km as the average]]></Description>
					<X>410</X><Y>260</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0.16]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1710781038319</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1710781076571</Id>
					<Name><![CDATA[p_avgEVEnergyConsumptionVan_kWhpkm]]></Name>
					<Description><![CDATA[praktijkverbruik van 26,9 kWh per 100 kilometer:
https://www.debedrijfswagenadviseurs.nl/praktijkverbruik-elektrische-bedrijfswagen/ ]]></Description>
					<X>410</X><Y>280</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0.269]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1710781076569</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1710781079971</Id>
					<Name><![CDATA[p_avgEVEnergyConsumptionTruck_kWhpkm]]></Name>
					<Description><![CDATA[https://www.elektrischevrachtwagen.nl/post/hoe-ver-kan-een-elektrische-vrachtwagen-rijden
0.9 - 1.7 kWh/km
--> pak gemiddelde: 1.3]]></Description>
					<X>410</X><Y>300</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[1.3]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1710781079969</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1710854993834</Id>
					<Name><![CDATA[p_gas_kWhpm3]]></Name>
					<Description><![CDATA[- https://www.greenchoice.nl/stroom-en-gas/bosgecompenseerd-gas/hoeveel-is-1-kuub-gas/

- https://www.joostdevree.nl/shtmls/calorische_waarde.shtml]]></Description>
					<X>760</X><Y>120</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[9.7]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1710854993832</Id>
							<Label><![CDATA[p_gas_kWh_per_m3]]></Label>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1710855166981</Id>
					<Name><![CDATA[p_hydrogenEnergyDensity_kWh_Nm3]]></Name>
					<Description><![CDATA[https://www.enapter.com/kb_post/what-is-the-energy-content-of-hydrogen 

LHV = 3.00 kWh/Nm3
HHV = 3.54 kWh/Nm3]]></Description>
					<X>760</X><Y>300</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[3.00]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1710855166979</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1710855166986</Id>
					<Name><![CDATA[p_hydrogenDensity_kg_Nm3]]></Name>
					<Description><![CDATA[https://keengas.com/gases/hydrogen/]]></Description>
					<X>760</X><Y>350</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0.08988]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1710855166984</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1710855166989</Id>
					<Name><![CDATA[p_oxygenDensity_kg_Nm3]]></Name>
					<Description><![CDATA[http://www.uigi.com/o2_conv.html]]></Description>
					<X>760</X><Y>370</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[1.4291]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1710855166987</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1710855166992</Id>
					<Name><![CDATA[p_oxygenProduction_kgO2pkgH2]]></Name>
					<Description><![CDATA[H20 = 2H + O
MM H = 1.008 g/mol
MM O = 16 g/mol
--> 1.008*2/16 = 0.126.
0.126 g waterstof per g water conversie.
1-0.126 = 0.874 g zuurstof per gram water conversie.

--> 1/0.126 =7.9365 gram zuurstof productie per gram waterstof productie.]]></Description>
					<X>760</X><Y>400</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[7.9365]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1710855166990</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1710855166996</Id>
					<Name><![CDATA[p_hydrogenEnergyDensity_kWh_kg]]></Name>
					<Description><![CDATA[https://www.cenex.co.uk/app/uploads/2021/05/Intro-to-hydrogen-1.pdf --> 33.6]]></Description>
					<X>760</X><Y>320</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[33.6]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1710855166994</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1710857640617</Id>
					<Name><![CDATA[p_diesel_kWhpl]]></Name>
					<Description><![CDATA[https://www.joostdevree.nl/shtmls/calorische_waarde.shtml]]></Description>
					<X>760</X><Y>140</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[10]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1710857640615</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1710857744349</Id>
					<Name><![CDATA[p_avgDieselConsumptionCar_kmpl]]></Name>
					<Description><![CDATA[https://www.unitedconsumers.com/blog/auto/zuinig-rijden.jsp]]></Description>
					<X>410</X><Y>360</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[21]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1710857744347</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1710857790809</Id>
					<Name><![CDATA[p_avgGasolineConsumptionCar_kmpl]]></Name>
					<Description><![CDATA[https://www.unitedconsumers.com/blog/auto/zuinig-rijden.jsp]]></Description>
					<X>410</X><Y>380</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[15]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1710857790807</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1710857906418</Id>
					<Name><![CDATA[p_gasoline_kWhpl]]></Name>
					<Description><![CDATA[https://www.joostdevree.nl/shtmls/calorische_waarde.shtml]]></Description>
					<X>760</X><Y>160</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[8.8]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1710857906416</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1710858056335</Id>
					<Name><![CDATA[p_avgDieselConsumptionCar_kWhpkm]]></Name>
					<X>410</X><Y>410</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[p_diesel_kWhpl/p_avgDieselConsumptionCar_kmpl]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1710858056333</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1710858084702</Id>
					<Name><![CDATA[p_avgGasolineConsumptionCar_kWhpkm]]></Name>
					<X>410</X><Y>430</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[p_gasoline_kWhpl/p_avgGasolineConsumptionCar_kmpl]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1710858084700</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1710859744426</Id>
					<Name><![CDATA[p_avgDieselConsumptionVan_kmpl]]></Name>
					<Description><![CDATA[https://www.webfleet.com/nl_nl/webfleet/blog/hoeveel-diesel-verbruikt-een-vrachtwagen-per-kilometer/

11 liter per 100 km = 9.1 km per liter.
]]></Description>
					<X>410</X><Y>470</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[9.1]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1710859744424</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1710859744445</Id>
					<Name><![CDATA[p_avgDieselConsumptionVan_kWhpkm]]></Name>
					<X>410</X><Y>490</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[p_diesel_kWhpl/p_avgDieselConsumptionVan_kmpl]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1710859744443</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1710859752249</Id>
					<Name><![CDATA[p_avgDieselConsumptionTruck_kmpl]]></Name>
					<Description><![CDATA[https://www.webfleet.com/nl_nl/webfleet/blog/hoeveel-diesel-verbruikt-een-vrachtwagen-per-kilometer/

--> 25 - 30 - 40 liter per 100 km. = 4 - 3.33 - 2.5 km per l
Heavely dependend on load, city/highway, etc.
For now: Picking 3.33 km per l]]></Description>
					<X>410</X><Y>520</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[3.33]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1710859752247</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1710859752272</Id>
					<Name><![CDATA[p_avgDieselConsumptionTruck_kWhpkm]]></Name>
					<X>410</X><Y>540</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[p_diesel_kWhpl/p_avgDieselConsumptionTruck_kmpl]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1710859752270</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1711454777796</Id>
					<Name><![CDATA[p_avgCOPHeatpump]]></Name>
					<Description><![CDATA[https://www.vaillant.be/consumenten/ons-advies/blog/het-rendement-van-een-warmtepomp/

Gemiddelde COP is 4.]]></Description>
					<X>90</X><Y>550</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[4]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1711454777794</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1711731856311</Id>
					<Name><![CDATA[p_avgUtilityPVPower_kWp]]></Name>
					<Description><![CDATA[FIND SOURCE!!! ????????]]></Description>
					<X>60</X><Y>360</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[1]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1711731856309</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1712671224154</Id>
					<Name><![CDATA[p_ratioElectricTrucks]]></Name>
					<Description><![CDATA[Ratio of how many trucks are electric vs diesel.
???
https://nos.nl/artikel/2483604-elektrische-vrachtwagens-blijven-achter-door-complexe-serie-aan-uitdagingen --> 'volgens cbs nog geen half procent.']]></Description>
					<X>60</X><Y>380</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0.005]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1712671224152</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1712674285330</Id>
					<Name><![CDATA[p_avgCompanyHeatingMethod]]></Name>
					<Description><![CDATA[Source?? --> Should definatly be still the case in 2024]]></Description>
					<X>60</X><Y>400</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[OL_GridConnectionHeatingType]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[OL_GridConnectionHeatingType.GASBURNER]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1712674285328</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1713542911226</Id>
					<Name><![CDATA[p_avgPVPower_kWpm2]]></Name>
					<Description><![CDATA[https://hallostroom.nl/zonnepanelen/opbrengst/per-m2/ --> 177 W/m2
https://www.zonneplan.nl/kenniscentrum/zonnepanelen/vermogen --> 212 W/m2
https://www.zonnepanelennoord.nl/vermogen-zonnepanelen/ --> 215 W/m2]]></Description>
					<X>70</X><Y>785</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0.2]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1713542911224</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1713965102391</Id>
					<Name><![CDATA[p_avgRatioBatteryCapacity_v_Power]]></Name>
					<Description><![CDATA[Average ratio of battery capacity over battery power.
--> If battery capacity (in kWh) is twice the battery power (in kW) --> ratio = 2.]]></Description>
					<X>70</X><Y>845</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[2]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1713965102389</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1714549650666</Id>
					<Name><![CDATA[p_avgHydrogenConsumptionCar_kWhpkm]]></Name>
					<Description><![CDATA[https://magnuscmd.com/hydrogen-fuel-cell-vehicles-a-threat-to-the-electric-car/

--> avg: 29 kWh per 100 km --> 0.29 kWh/km
]]></Description>
					<X>410</X><Y>600</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0.29]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1714549650664</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1714549714841</Id>
					<Name><![CDATA[p_avgHydrogenConsumptionVan_kWhpkm]]></Name>
					<X>410</X><Y>620</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0.5]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1714549714839</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1714549732980</Id>
					<Name><![CDATA[p_avgHydrogenConsumptionTruck_kWhpkm]]></Name>
					<X>410</X><Y>640</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[2]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1714549732978</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1714647230831</Id>
					<Name><![CDATA[p_avgRatioRoofPotentialPV]]></Name>
					<Description><![CDATA[value for ratio that]]></Description>
					<X>70</X><Y>805</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<ParameterEditor>
							<Id>1714647230829</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1715174289599</Id>
					<Name><![CDATA[p_avgEfficiencyHeatpump]]></Name>
					<Description><![CDATA[Efficiency (eta_r) used to calculate the COP in the energy asset based on temperature differences. 

'0.5' comes from old code, no source found for it yet.]]></Description>
					<X>90</X><Y>570</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0.5]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1715174289597</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1715174302529</Id>
					<Name><![CDATA[p_avgOutputTemperatureHeatpump_degC]]></Name>
					<Description><![CDATA[The avg output temperature of a heatpump in degC. Can be set manually, as an average 60 has been taken. ]]></Description>
					<X>90</X><Y>590</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[60]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1715174302527</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1715174916660</Id>
					<Name><![CDATA[p_avgEfficiencyGasBurner]]></Name>
					<Description><![CDATA[Average heating efficiency of a gas burner.

--> SOURCE?]]></Description>
					<X>90</X><Y>640</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0.99]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1715174916658</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1715174929088</Id>
					<Name><![CDATA[p_avgOutputTemperatureGasBurner_degC]]></Name>
					<Description><![CDATA[Average output temperature of a gas burner unit in degC.

--> Source?]]></Description>
					<X>90</X><Y>660</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[90]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1715174929086</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1715174942826</Id>
					<Name><![CDATA[p_avgEfficiencyHydrogenBurner]]></Name>
					<Description><![CDATA[Average heating efficiency of a hydrogen burner.

- https://h2sciencecoalition.com/blog/hydrogen-for-heating-a-comparison-with-heat-pumps-part-1/

- https://www.csrf.ac.uk/blog/hydrogen-for-heating/]]></Description>
					<X>90</X><Y>710</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0.90]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1715174942824</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1715174942831</Id>
					<Name><![CDATA[p_avgOutputTemperatureHydrogenBurner_degC]]></Name>
					<Description><![CDATA[Average output temperature of a hydrogen burner unit in degC.

--> Source?]]></Description>
					<X>90</X><Y>730</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[90]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1715174942829</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
			</Variables>
			<Functions>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1715865083777</Id>
					<Name><![CDATA[f_setAVGC_data]]></Name>
					<X>-240</X><Y>60</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[J_AVGC_data dataAVGC = new J_AVGC_data();

dataAVGC.p_avgHouseGasConsumption_m3_yr = p_avgHouseGasConsumption_m3_yr;
dataAVGC.p_avgHouseElectricityConsumption_kWh_yr = p_avgHouseElectricityConsumption_kWh_yr;
dataAVGC.p_avgEVMaxChargePowerVan_kW = p_avgEVMaxChargePowerVan_kW;
dataAVGC.p_avgHouseConnectionCapacity_kW = p_avgHouseConnectionCapacity_kW;
dataAVGC.p_avgHouseHeatingMethod = p_avgHouseHeatingMethod;
dataAVGC.p_ratioEVHousePersonalCars = p_shareOfElectricVehicleOwnership;
dataAVGC.p_avgEVMaxChargePowerCar_kW = p_avgEVMaxChargePowerCar_kW;
dataAVGC.p_avgEVMaxChargePowerTruck_kW = p_avgEVMaxChargePowerTruck_kW;
dataAVGC.p_avgEVStorageCar_kWh = p_avgEVStorageCar_kWh;
dataAVGC.p_avgEVStorageVan_kWh = p_avgEVStorageVan_kWh;
dataAVGC.p_avgHousePVInstallationPower_kWp = p_avgHousePVInstallationPower_kWp;
dataAVGC.p_avgEVStorageTruck_kWh = p_avgEVStorageTruck_kWh;
dataAVGC.p_ratioHouseInstalledPV = p_ratioHouseInstalledPV;
dataAVGC.p_gas_kWhpm3 = p_gas_kWhpm3;
dataAVGC.p_diesel_kWhpl = p_diesel_kWhpl;
dataAVGC.p_gasoline_kWhpl = p_gasoline_kWhpl;
dataAVGC.p_avgUtilityHeatingMethod = p_avgUtilityHeatingMethod;
dataAVGC.p_avgUtilityConnectionCapacity_kW = p_avgUtilityConnectionCapacity_kW;
dataAVGC.p_avgUtilityPVPower_kWp = p_avgUtilityPVPower_kWp;
dataAVGC.p_ratioElectricTrucks = p_ratioElectricTrucks;
dataAVGC.p_avgCompanyHeatingMethod = p_avgCompanyHeatingMethod;
dataAVGC.p_avgEVEnergyConsumptionCar_kWhpkm = p_avgEVEnergyConsumptionCar_kWhpkm;
dataAVGC.p_avgEVEnergyConsumptionVan_kWhpkm = p_avgEVEnergyConsumptionVan_kWhpkm;
dataAVGC.p_avgEVEnergyConsumptionTruck_kWhpkm = p_avgEVEnergyConsumptionTruck_kWhpkm;
dataAVGC.p_hydrogenEnergyDensity_kWh_Nm3 = p_hydrogenEnergyDensity_kWh_Nm3;
dataAVGC.p_avgDieselConsumptionCar_kmpl = p_avgDieselConsumptionCar_kmpl;
dataAVGC.p_avgGasolineConsumptionCar_kmpl = p_avgGasolineConsumptionCar_kmpl;
dataAVGC.p_hydrogenEnergyDensity_kWh_kg = p_hydrogenEnergyDensity_kWh_kg;
dataAVGC.p_hydrogenDensity_kg_Nm3 = p_hydrogenDensity_kg_Nm3;
dataAVGC.p_oxygenDensity_kg_Nm3 = p_oxygenDensity_kg_Nm3;
dataAVGC.p_avgCOPHeatpump = p_avgCOPHeatpump;
dataAVGC.p_avgEfficiencyHeatpump = p_avgEfficiencyHeatpump;
dataAVGC.p_avgDieselConsumptionCar_kWhpkm = p_avgDieselConsumptionCar_kWhpkm;
dataAVGC.p_oxygenProduction_kgO2pkgH2 = p_oxygenProduction_kgO2pkgH2;
dataAVGC.p_avgGasolineConsumptionCar_kWhpkm = p_avgGasolineConsumptionCar_kWhpkm;
dataAVGC.p_avgDieselConsumptionVan_kmpl = p_avgDieselConsumptionVan_kmpl;
dataAVGC.p_avgDieselConsumptionVan_kWhpkm = p_avgDieselConsumptionVan_kWhpkm;
dataAVGC.p_avgDieselConsumptionTruck_kmpl = p_avgDieselConsumptionTruck_kmpl;
dataAVGC.p_avgDieselConsumptionTruck_kWhpkm = p_avgDieselConsumptionTruck_kWhpkm;
dataAVGC.p_avgOutputTemperatureHeatpump_degC = p_avgOutputTemperatureHeatpump_degC;
dataAVGC.p_avgHydrogenConsumptionCar_kWhpkm = p_avgHydrogenConsumptionCar_kWhpkm;
dataAVGC.p_avgEfficiencyGasBurner = p_avgEfficiencyGasBurner;
dataAVGC.p_avgHydrogenConsumptionVan_kWhpkm = p_avgHydrogenConsumptionVan_kWhpkm;
dataAVGC.p_avgHydrogenConsumptionTruck_kWhpkm = p_avgHydrogenConsumptionTruck_kWhpkm;
dataAVGC.p_avgOutputTemperatureGasBurner_degC = p_avgOutputTemperatureGasBurner_degC;
dataAVGC.p_avgEfficiencyHydrogenBurner = p_avgEfficiencyHydrogenBurner;
dataAVGC.p_avgOutputTemperatureHydrogenBurner_degC = p_avgOutputTemperatureHydrogenBurner_degC;
dataAVGC.p_avgPVPower_kWpm2= p_avgPVPower_kWpm2;
dataAVGC.p_avgRatioRoofPotentialPV = p_avgRatioRoofPotentialPV;
dataAVGC.p_avgRatioBatteryCapacity_v_Power = p_avgRatioBatteryCapacity_v_Power;

loader.energyModel.avgc_data = dataAVGC;]]></Body>
				</Function>
			</Functions>
			<AgentLinks>
				<AgentLink>
					<Id>1710780080662</Id>
					<Name><![CDATA[connections]]></Name>
					<X>50</X><Y>-50</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<HandleReceiveInConnections>false</HandleReceiveInConnections>
					<AgentLinkType>COLLECTION_OF_LINKS</AgentLinkType>
					<AgentLinkBidirectional>true</AgentLinkBidirectional>
					<MessageType><![CDATA[Object]]></MessageType>
					<LineStyle>SOLID</LineStyle>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineZOrder>UNDER_AGENTS</LineZOrder>
					<LineArrow>NONE</LineArrow>
					<LineArrowPosition>END</LineArrowPosition>
				</AgentLink>
			</AgentLinks>

			<ContainerLinks>
				<ContainerLink>
					<Id>1710780080724</Id>
					<Name><![CDATA[loader]]></Name>
					<X>50</X><Y>-100</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<ActiveObjectClass>
						<PackageName><![CDATA[zero_loader]]></PackageName>
						<ClassName><![CDATA[Loader]]></ClassName>
					</ActiveObjectClass>
				</ContainerLink>
			</ContainerLinks>

			<Presentation>
				<Level>
					<Id>1710780080668</Id>
					<Name><![CDATA[level]]></Name>
					<X>0</X><Y>0</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<Z>0</Z>
					<LevelVisibility>DIM_NON_CURRENT</LevelVisibility>

			<Presentation>
				<Rectangle>
					<Id>1710861902676</Id>
					<Name><![CDATA[rectangle1]]></Name>
					<X>700</X><Y>0</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Lock>true</Lock>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>3</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>700</Width>
					<Height>980</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-1</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Rectangle>
					<Id>1710861834363</Id>
					<Name><![CDATA[rectangle]]></Name>
					<X>0</X><Y>0</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Lock>true</Lock>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>3</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>700</Width>
					<Height>980</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-1</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1710780760915</Id>
					<Name><![CDATA[text]]></Name>
					<X>50</X><Y>90</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Average values for houses]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1710780789660</Id>
					<Name><![CDATA[text1]]></Name>
					<X>50</X><Y>290</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Average values for companies/utilities]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1710780922896</Id>
					<Name><![CDATA[text2]]></Name>
					<X>400</X><Y>90</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Average values for Electric Vehicles]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1710854955872</Id>
					<Name><![CDATA[text3]]></Name>
					<X>1000</X><Y>30</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Constants]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>18</Size>
						<Style>1</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1710855034675</Id>
					<Name><![CDATA[text4]]></Name>
					<X>750</X><Y>90</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Energy conversion constants]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1710855064105</Id>
					<Name><![CDATA[text5]]></Name>
					<X>300</X><Y>30</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Averages]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>20</Size>
						<Style>1</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Rectangle>
					<Id>1710855166970</Id>
					<Name><![CDATA[rectangle6]]></Name>
					<X>740</X><Y>250</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>3</LineWidth>
					<LineColor>-16711681</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>280</Width>
					<Height>200</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-1</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1710855166972</Id>
					<Name><![CDATA[text19]]></Name>
					<X>750</X><Y>260</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Hydrogen constants]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>1</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1710857834844</Id>
					<Name><![CDATA[text6]]></Name>
					<X>400</X><Y>330</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Average values for Fossil fueled vehicles]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1711454831581</Id>
					<Name><![CDATA[text7]]></Name>
					<X>60</X><Y>500</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Heat assets]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1713542900145</Id>
					<Name><![CDATA[text8]]></Name>
					<X>60</X><Y>755</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[PV panels]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1713965171789</Id>
					<Name><![CDATA[text9]]></Name>
					<X>60</X><Y>820</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Batteries]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1714549667375</Id>
					<Name><![CDATA[text10]]></Name>
					<X>400</X><Y>570</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Average values for Hydrogen vehicles]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1715174315714</Id>
					<Name><![CDATA[text11]]></Name>
					<X>80</X><Y>520</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Heatpumps]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1715174353333</Id>
					<Name><![CDATA[text12]]></Name>
					<X>80</X><Y>610</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Gasburners]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1715174942823</Id>
					<Name><![CDATA[text13]]></Name>
					<X>80</X><Y>680</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Hydrogenburners]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
			</Presentation>

				</Level>
			</Presentation>

		</ActiveObjectClass>
	</ActiveObjectClasses>	
	<DifferentialEquationsMethod>EULER</DifferentialEquationsMethod>
	<MixedEquationsMethod>RK45_NEWTON</MixedEquationsMethod>
	<AlgebraicEquationsMethod>MODIFIED_NEWTON</AlgebraicEquationsMethod>
	<AbsoluteAccuracy>1.0</AbsoluteAccuracy>
	<FixedTimeStep>1.0</FixedTimeStep>
	<RelativeAccuracy>1.0</RelativeAccuracy>
	<TimeAccuracy>0.1</TimeAccuracy>
	<Frame>
		<Width>1920</Width>
		<Height>980</Height>
	</Frame>
	<Database>
		<Logging>false</Logging>
		<AutoExport>false</AutoExport>
		<ShutdownCompact>false</ShutdownCompact>
		<ImportSettings>
			<ExternalConnection>
				<Id>1718293885444</Id>
				<Name><![CDATA[database]]></Name>
				<X>0</X><Y>0</Y>
				<Label><X>10</X><Y>0</Y></Label>
				<PublicFlag>false</PublicFlag>
				<PresentationFlag>true</PresentationFlag>
				<ShowLabel>true</ShowLabel>
				<DatabaseType>EXCEL_ACCESS</DatabaseType>
				<ConnectionURL><![CDATA[]]></ConnectionURL>
				<ConnectOnStartup>true</ConnectOnStartup>
				<DatabaseName><![CDATA[]]></DatabaseName>
				<ResourceReference>
					<PackageName><![CDATA[zero_loader]]></PackageName>
					<ClassName><![CDATA[project_info.xlsx]]></ClassName>
				</ResourceReference>
				<Host><![CDATA[localhost]]></Host>
				<JdbcDriverClassName><![CDATA[net.sourceforge.jtds.jdbc.Driver]]></JdbcDriverClassName>
				<Login><![CDATA[]]></Login>
				<Password><![CDATA[]]></Password>
			</ExternalConnection>
			<ExternalConnection>
				<Id>1718293743521</Id>
				<Name><![CDATA[database]]></Name>
				<X>0</X><Y>0</Y>
				<Label><X>10</X><Y>0</Y></Label>
				<PublicFlag>false</PublicFlag>
				<PresentationFlag>true</PresentationFlag>
				<ShowLabel>true</ShowLabel>
				<DatabaseType>EXCEL_ACCESS</DatabaseType>
				<ConnectionURL><![CDATA[]]></ConnectionURL>
				<ConnectOnStartup>true</ConnectOnStartup>
				<DatabaseName><![CDATA[]]></DatabaseName>
				<ResourceReference>
					<PackageName><![CDATA[zero_loader]]></PackageName>
					<ClassName><![CDATA[data_Tuinzigt/Panden_Tuinzigt.xlsx]]></ClassName>
				</ResourceReference>
				<Host><![CDATA[localhost]]></Host>
				<JdbcDriverClassName><![CDATA[net.sourceforge.jtds.jdbc.Driver]]></JdbcDriverClassName>
				<Login><![CDATA[]]></Login>
				<Password><![CDATA[]]></Password>
			</ExternalConnection>
			<ExternalConnection>
				<Id>1718541575754</Id>
				<Name><![CDATA[database]]></Name>
				<X>0</X><Y>0</Y>
				<Label><X>10</X><Y>0</Y></Label>
				<PublicFlag>false</PublicFlag>
				<PresentationFlag>true</PresentationFlag>
				<ShowLabel>true</ShowLabel>
				<DatabaseType>EXCEL_ACCESS</DatabaseType>
				<ConnectionURL><![CDATA[]]></ConnectionURL>
				<ConnectOnStartup>true</ConnectOnStartup>
				<DatabaseName><![CDATA[]]></DatabaseName>
				<ResourceReference>
					<PackageName><![CDATA[zero_loader]]></PackageName>
					<ClassName><![CDATA[data_Scale/Laadpunten_Scale.xlsx]]></ClassName>
				</ResourceReference>
				<Host><![CDATA[localhost]]></Host>
				<JdbcDriverClassName><![CDATA[net.sourceforge.jtds.jdbc.Driver]]></JdbcDriverClassName>
				<Login><![CDATA[]]></Login>
				<Password><![CDATA[]]></Password>
			</ExternalConnection>
			<TableImportSettings>
				<TableReference>
					<PackageName><![CDATA[zero_loader]]></PackageName>
					<ClassName><![CDATA[project_info]]></ClassName>
				</TableReference>
				<ConnectionIndex>0</ConnectionIndex>
				<ExternalTableName><![CDATA["project_info"]]></ExternalTableName>
				<AutoImport>false</AutoImport>
			</TableImportSettings>
			<TableImportSettings>
				<TableReference>
					<PackageName><![CDATA[zero_loader]]></PackageName>
					<ClassName><![CDATA[panden]]></ClassName>
				</TableReference>
				<ConnectionIndex>1</ConnectionIndex>
				<ExternalTableName><![CDATA["Panden"]]></ExternalTableName>
				<AutoImport>false</AutoImport>
			</TableImportSettings>
			<TableImportSettings>
				<TableReference>
					<PackageName><![CDATA[zero_loader]]></PackageName>
					<ClassName><![CDATA[laadpunten]]></ClassName>
				</TableReference>
				<ConnectionIndex>2</ConnectionIndex>
				<ExternalTableName><![CDATA["laadpunten"]]></ExternalTableName>
				<AutoImport>false</AutoImport>
			</TableImportSettings>
		</ImportSettings>
		<ExportSettings>
		</ExportSettings>
	</Database>
	
	<RunConfiguration ActiveObjectClassId="1658477103140">
		<Id>1658477103163</Id>
		<Name><![CDATA[RunConfiguration]]></Name>
		<MaximumMemory>4096</MaximumMemory>
		<ModelTimeProperties>
			<StopOption><![CDATA[Stop at specified date]]></StopOption>
			<InitialDate><![CDATA[1672531200000]]></InitialDate>	
			<InitialTime><![CDATA[0.0]]></InitialTime>	
			<FinalDate><![CDATA[1704067200000]]></FinalDate>	
			<FinalTime><![CDATA[8760.0]]></FinalTime>	
		</ModelTimeProperties>
		<AnimationProperties>
			<StopNever>false</StopNever>
			<ExecutionMode>realTimeScaled</ExecutionMode>
			<RealTimeScale>10.0</RealTimeScale>
			<EnableZoomAndPanning>true</EnableZoomAndPanning>
			<EnableDeveloperPanel>true</EnableDeveloperPanel>
			<ShowDeveloperPanelOnStart>false</ShowDeveloperPanelOnStart>
		</AnimationProperties>
		<Inputs>		
		</Inputs>
		<Outputs>
		</Outputs>
	</RunConfiguration>
	<Experiments>	
		<!--   =========   Simulation Experiment   ========  -->
		<SimulationExperiment ActiveObjectClassId="1658477103140">
			<Id>1715858152939</Id>
			<Name><![CDATA[Simulation]]></Name>
			<CommandLineArguments><![CDATA[]]></CommandLineArguments>
			<MaximumMemory>16384</MaximumMemory>
			<RandomNumberGenerationType>fixedSeed</RandomNumberGenerationType>
			<CustomGeneratorCode>new Random()</CustomGeneratorCode>
			<SeedValue>1</SeedValue>
			<SelectionModeForSimultaneousEvents>LIFO</SelectionModeForSimultaneousEvents>
			<VmArgs><![CDATA[]]></VmArgs>
			<LoadRootFromSnapshot>false</LoadRootFromSnapshot>


			<Parameters>			
				<Parameter>
					<ParameterName><![CDATA[p_simulatedArea]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[p_simulationYear]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[p_selectedProject]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[p_runHeadlessAtStartup]]></ParameterName>
				</Parameter>
			</Parameters>			
			<PresentationProperties>
				<EnableZoomAndPanning>true</EnableZoomAndPanning>
				<ExecutionMode><![CDATA[realTimeScaled]]></ExecutionMode>
				<Title><![CDATA[Zero_Loader : Simulation]]></Title>	
				<EnableDeveloperPanel>true</EnableDeveloperPanel>
				<ShowDeveloperPanelOnStart>false</ShowDeveloperPanelOnStart>
				<RealTimeScale>5.0</RealTimeScale>
			</PresentationProperties>
			<ModelTimeProperties>
				<StopOption><![CDATA[Stop at specified date]]></StopOption>
				<InitialDate><![CDATA[1672531200000]]></InitialDate>	
				<InitialTime><![CDATA[0.0]]></InitialTime>	
				<FinalDate><![CDATA[1704067200000]]></FinalDate>	
				<FinalTime><![CDATA[8760.0]]></FinalTime>	
			</ModelTimeProperties>
			<BypassInitialScreen>true</BypassInitialScreen>
		</SimulationExperiment>	
	</Experiments>
	<ModelResources>
		<Resource>
			<Path><![CDATA[data_Generic/AlbatrossProcessedVehicleTrips.xlsx]]></Path>
			<ReferencedFromUserCode>false</ReferencedFromUserCode>
			<Location>FILE_SYSTEM</Location>
		</Resource>
		<Resource>
			<Path><![CDATA[data_Generic/inputECookerPatterns.xlsx]]></Path>
			<ReferencedFromUserCode>false</ReferencedFromUserCode>
			<Location>FILE_SYSTEM</Location>
		</Resource>
		<Resource>
			<Path><![CDATA[data_Generic/inputTruckTripPatterns.xlsx]]></Path>
			<ReferencedFromUserCode>false</ReferencedFromUserCode>
			<Location>FILE_SYSTEM</Location>
		</Resource>
		<Resource>
			<Path><![CDATA[libzorm-137-all.jar]]></Path>
			<ReferencedFromUserCode>false</ReferencedFromUserCode>
			<Location>FILE_SYSTEM</Location>
		</Resource>
		<Resource>
			<Path><![CDATA[project_info.xlsx]]></Path>
			<ReferencedFromUserCode>false</ReferencedFromUserCode>
			<Location>FILE_SYSTEM</Location>
		</Resource>
		<Resource>
			<Path><![CDATA[data_Tuinzigt/Panden_Tuinzigt.xlsx]]></Path>
			<ReferencedFromUserCode>false</ReferencedFromUserCode>
			<Location>FILE_SYSTEM</Location>
		</Resource>
		<Resource>
			<Path><![CDATA[data_Scale/Laadpunten_Scale.xlsx]]></Path>
			<ReferencedFromUserCode>false</ReferencedFromUserCode>
			<Location>FILE_SYSTEM</Location>
		</Resource>
	</ModelResources>
    <RequiredLibraryReference>
		<LibraryName><![CDATA[com.anylogic.libraries.modules.markup_descriptors]]></LibraryName>
		<VersionMajor>1</VersionMajor>
		<VersionMinor>0</VersionMinor>
		<VersionBuild>0</VersionBuild>
    </RequiredLibraryReference>
    <RequiredLibraryReference>
		<LibraryName><![CDATA[zero_engine]]></LibraryName>
		<VersionMajor>0</VersionMajor>
		<VersionMinor>0</VersionMinor>
		<VersionBuild>0</VersionBuild>
    </RequiredLibraryReference>
    <RequiredLibraryReference>
		<LibraryName><![CDATA[zero_interface]]></LibraryName>
		<VersionMajor>0</VersionMajor>
		<VersionMinor>0</VersionMinor>
		<VersionBuild>0</VersionBuild>
    </RequiredLibraryReference>
    <RequiredLibraryReference>
		<LibraryName><![CDATA[digital_twin_results]]></LibraryName>
		<VersionMajor>0</VersionMajor>
		<VersionMinor>0</VersionMinor>
		<VersionBuild>0</VersionBuild>
    </RequiredLibraryReference>
	<ClassPathEntry>
		<ResourceReference>
			<PackageName><![CDATA[zero_loader]]></PackageName>
			<ClassName><![CDATA[libzorm-137-all.jar]]></ClassName>
		</ResourceReference>
		<Imported>true</Imported>
		<Folder>false</Folder>
	</ClassPathEntry>
	<CloudModelUuid><![CDATA[784ed110-8b2c-4bcf-be75-54f69d278ec6]]></CloudModelUuid>
</Model>
</AnyLogicWorkspace>